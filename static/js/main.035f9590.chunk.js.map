{"version":3,"sources":["constants.js","SignIn.js","TableClass.js","Register.js","PlayerHandler.js","App.js","index.js"],"names":["constants","url","axios","require","window","onbeforeunload","SignIn","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onEmailChange","event","setState","signInEmail","target","value","onPasswordChange","signInPassword","onSubmitSignIn","fetch","method","headers","Content-Type","body","JSON","stringify","email","state","password","then","response","json","result","name","ChangeState","rollno","notify","show","message","catch","err","updateEmailAndApiKey","setEmailAndApiKey","apiKey","validateLogIn","route","that","assertThisInitialized","mode","status","data","apikey","updateRoute","error","console","log","validateLogIn1","post","toString","includes","onSubmitSignIn1","_this2","react_default","a","createElement","notify_default","className","id","htmlFor","type","onChange","onClick","React","Component","TableClass","setDataValues","objectSpread","conditions","length","values","totalEarned","map","entry","earned","rows","totalEarning","alert","tempCondition","assigned_to","auction_status","received_time","cardId","onClickGoBack","columns","tempConditions","dataColumns","dataRows","tableHeaders","column","tableBody","row","style","height","overflow","color","display","width","marginTop","marginLeft","Math","floor","backgroundColor","borderColor","padding","margin","borderWidth","textAlign","placeholder","concat","borderBottom","bcrypt","Register","onNameChange","hasNumber","myString","test","onSubmitRegistration","_this$state","user","ChangeState2","onSubmitReg2","_this$state2","myHash","hash","onSubmitReg1","onClickSignInButton","input","hashWord","PlayerHandler","openModal","cancelid","visible","cardid","clickModalOK","cancelId","ret","msg","currPlayers","toConsumableArray","playerData","forEach","element","index","tempID","cardID","splice","displayPlayerData","closeModal","storePlayerData","prevData","tempData","player_name","player_rating","position","startingBid","buyNowPrice","tradeState","expires","tradeId","remTime","timeHandler","rating","tradeID","Date","getTime","time","days","hours","minutes","newData","notBought","playersLeft","myData","buttonStyle","fontSize","cancelButtonStyle","cardStyle","border","toBeDisplayed","player","key","react_countdown_clock_default","seconds","alpha","timeFormat","size","onComplete","onBuyClick","onCancelClick","noPlayerDisplay","displayData","justifyContent","tradeid","checkBoughtStatus","playerID","instance","maxPlayers","onKeyDown","onSubmit","playSoundStatus","getDataFromServer","max","searching","setTimeout","buttonText","onClickSignOut","onClickTable","onClickRegister","signOutAllUsers","isAdmin","billingRate","timeRem","Date1","timeToExpire","secdiff","mindiff","hourdiff","timeToExp","_this3","addEventListener","ev","preventDefault","newRate","_this4","superLogOut","tabIndex","toUpperCase","overflowX","react_loading_default","lib_default","effect","borderSize","react_sound_lib_default","playStatus","playFromPosition","volume","autoLoad","loop","App","query","src_SignIn_0","src_Register_0","src_PlayerHandler","src_TableClass","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.035f9590.chunk.js","sourcesContent":["//export default {url:'http://192.168.0.103:3001'};\r\n\r\n//export default {url: \"https://cors-anywhere.herokuapp.com/https://git.heroku.com/serene-inlet-50937.git\"};\r\n//export default {url: \"https://git.heroku.com/serene-inlet-50937.git\"};\r\n\r\nexport default {url: \"https://serene-inlet-50937.herokuapp.com\"};","import React from 'react';\r\nimport './SignIn.css';\r\nimport constants from './constants';\r\nimport Notifications, {notify} from 'react-notify-toast';\r\n\r\nconst axios = require('axios');\r\n\r\nwindow.onbeforeunload = function() {\r\n  return 'You have unsaved changes!';\r\n}\r\n\r\nclass SignIn extends React.Component {\r\n\r\n  constructor(props){\r\n    super(props);\r\n\r\n    this.state = {\r\n      signInEmail: '',\r\n      signInPassword: '',\r\n      apiKey: '',\r\n    }\r\n\r\n  }\r\n\r\n  onEmailChange = (event) => {\r\n    this.setState({signInEmail: event.target.value});\r\n  }\r\n\r\n  onPasswordChange = (event) => {\r\n    this.setState({signInPassword: event.target.value});\r\n  }\r\n\r\n  onSubmitSignIn = () => {\r\n\r\n      fetch('https://gentle-everglades-47985.herokuapp.com/signin',{\r\n      method: 'post',\r\n      headers: {'Content-Type': 'application/json'},\r\n      body: JSON.stringify({\r\n      email: this.state.signInEmail,\r\n      password: this.state.signInPassword\r\n      })\r\n    })\r\n    .then(response => response.json())\r\n    .then(result => {\r\n          if(result.name)\r\n          {            \r\n            this.props.ChangeState('home', result.email, result.name, result.rollno)\r\n          }\r\n          else\r\n          {\r\n            notify.show(result.message);\r\n          }\r\n    })\r\n    .catch(err => notify.show(err.message))\r\n\r\n  }\r\n\r\n  updateEmailAndApiKey = () =>\r\n  {\r\n    // console.log('email: ', this.state.signInEmail);\r\n    this.props.setEmailAndApiKey(this.state.signInEmail, this.state.apiKey);\r\n  }\r\n\r\n   validateLogIn = (route) => {\r\n    let that = this;\r\n    fetch(constants.url + '/signin',{\r\n      method: 'post',\r\n      mode:'cors',\r\n      headers: {'Content-Type': 'application/json'},\r\n      body: JSON.stringify({\r\n      email: this.state.signInEmail,\r\n      password: this.state.signInPassword,\r\n      })\r\n    })\r\n    .then(response => {\r\n    //    console.log(response);\r\n        if(response.status == 200)\r\n        {          \r\n           fetch(constants.url + '/getApiKey',{\r\n                method: 'post',\r\n                headers: {'Content-Type': 'application/json'},\r\n                body: JSON.stringify({\r\n                email: this.state.signInEmail,\r\n                })\r\n              })\r\n              .then(response => response.json()) \r\n              .then(data =>\r\n            {\r\n              // console.log('resp ', data);\r\n              that.setState({signInEmail: data.email});\r\n              that.setState({apiKey: data.apikey});\r\n              that.updateEmailAndApiKey();\r\n              if(this.state.apiKey)\r\n              {\r\n                this.props.updateRoute(route);\r\n              }\r\n            })\r\n            .catch(function (error) {\r\n              console.log(\"Error: \" , error);\r\n              notify.show(\"There was an error trying to login. Please try again shortly.\", \"error\", 10000);\r\n            });\r\n        }\r\n        else\r\n        {\r\n          if(response.status == 400)\r\n          {\r\n            console.log(\"Error: \" , response);\r\n            notify.show(\"The login details are invalid. Please re-check and try again.\", \"warning\", 7000);\r\n          }\r\n          else\r\n          {\r\n            console.log(\"Error: \" , response);\r\n            notify.show(\"There was an error trying to login. Please try again shortly.\", \"error\", 10000);\r\n          }\r\n        }\r\n      })\r\n    .catch(err => {        \r\n      console.log(\"Error: \" , err);\r\n      notify.show(\"There was an error trying to login. Please try again shortly.\", \"error\", 10000);\r\n    });\r\n}\r\n\r\n  validateLogIn1 = (route) => \r\n  {\r\n    let that = this;\r\n//    notify.show(\"Logging in. Please wait.\", \"success\", 3000);\r\n//    notify.show(\"Logging in. Please wait.\", \"success\", 1000);\r\n    axios.post(constants.url + '/signin', {\r\n        email: this.state.signInEmail,\r\n        password: this.state.signInPassword,\r\n      })\r\n      .then(function (response) {\r\n        console.log(response);\r\n        if(response.status == 200)\r\n        {          \r\n           fetch(constants.url + '/getApiKey',{\r\n                method: 'post',\r\n                headers: {'Content-Type': 'application/json'},\r\n                body: JSON.stringify({\r\n                email: that.state.signInEmail,\r\n                })\r\n              })\r\n              .then(response => response.json()) \r\n              .then(data =>\r\n            {\r\n              // console.log('resp ', data);\r\n              that.setState({signInEmail: data.email});\r\n              that.setState({apiKey: data.apikey});\r\n              that.updateEmailAndApiKey();\r\n              if(that.state.apiKey)\r\n              {\r\n                that.props.updateRoute(route);\r\n              }\r\n            })\r\n            .catch(function (error) {\r\n              notify.show(\"Server error occured. Please retry logging in after a few minutes. \", \"warning\", 5000);\r\n            });\r\n        }\r\n      })\r\n      .catch(function (error) {\r\n        console.log(\"Login error: \", error);\r\n        let myErr = error.toString();\r\n        if(myErr.includes(\"400\"))\r\n        {\r\n          notify.show(\"Invalid login credentials detected. Please verify and try again. \", \"error\", 5000);\r\n        }\r\n        else\r\n        {\r\n          notify.show(\"Server error occured. Please retry logging in after a few minutes or contact the admin if problem persists.\", \"warning\", 5000);\r\n        }\r\n      });    \r\n  }\r\n\r\n onSubmitSignIn1 = (route) =>\r\n  {\r\n    if(route == \"Register\")\r\n    {\r\n      this.props.updateRoute(route);\r\n    }\r\n    else\r\n    {\r\n//      notify.show(\"Logging in. Please wait.\", \"success\", 200);\r\n      this.validateLogIn1(route);\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n  }\r\n  \r\n\r\n  render(){\r\n    return (\r\n      <div>\r\n      <Notifications />\r\n      <article className=\"br3 w-100 w-50-m w-25-l mw6 shadow-5 center signinbox\">\r\n      <main className=\"pa4 black-80\">\r\n        <div className=\"measure\">\r\n          <fieldset id=\"sign_up\" className=\"ba b--transparent ph0 mh0\">\r\n            <legend className=\"signIn\">Sign In</legend>\r\n            <div className=\"mt3\">\r\n              <label className=\"db fw6 lh-copy f4 myTColor\" htmlFor=\"email-address\">Email</label>\r\n              <input \r\n              className=\"pa2 w-100\" \r\n              type=\"email\" \r\n              name=\"email-address\"  \r\n              id=\"email-address\"\r\n              onChange = {this.onEmailChange}\r\n              />\r\n            </div>\r\n            <div className=\"mv3\">\r\n              <label className=\"db fw6 lh-copy f4 myTColor\" htmlFor=\"password\">Password</label>\r\n              <input \r\n              className=\"pa2 w-100\" \r\n              type=\"password\" \r\n              name=\"password\"  \r\n              id=\"password\"\r\n              onChange = {this.onPasswordChange}\r\n\r\n              />\r\n            </div>\r\n          <div>\r\n            <input \r\n            onClick = {() => this.onSubmitSignIn1(\"App\")}\r\n            className=\"input b ph3 pv2 input-reset ba b--black hover-bg-green grow pointer f6 dib\" \r\n            type=\"submit\" \r\n            value=\"Sign in\"/>\r\n          </div>\r\n          </fieldset>\r\n        </div>\r\n      </main>\r\n      </article>\r\n      </div>\r\n  \t );\r\n  }\r\n}\r\nexport default SignIn;","import React, {Component} from 'react';\r\nimport constants from './constants';\r\nimport Notifications, {notify} from 'react-notify-toast';\r\n\r\n  // Example Data\r\n  var tableData = {\r\n    columns: ['Service', 'Cost/Unit', 'Unit', 'Units Requested'],\r\n    rows: [{\r\n      'Service': 'Veterinary Assitance',\r\n      'Cost/Unit': 50,\r\n      'Unit': '1 Hour',\r\n      'Units Requested': 12\r\n    }, {\r\n      'Service': 'Veterinary Assitance',\r\n      'Cost/Unit': 50,\r\n      'Unit': '1 Hour',\r\n      'Units Requested': 12\r\n    }, {\r\n      'Service': 'Veterinary Assitance',\r\n      'Cost/Unit': 50,\r\n      'Unit': '1 Hour',\r\n      'Units Requested': 12\r\n    }, {\r\n      'Service': 'Veterinary Assitance',\r\n      'Cost/Unit': 50,\r\n      'Unit': '1 Hour',\r\n      'Units Requested': 12\r\n    }, {\r\n      'Service': 'Veterinary Assitance',\r\n      'Cost/Unit': 50,\r\n      'Unit': '1 Hour',\r\n      'Units Requested': 12\r\n    }, {\r\n      'Service': 'Veterinary Assitance',\r\n      'Cost/Unit': 50,\r\n      'Unit': '1 Hour',\r\n      'Units Requested': 12\r\n    }, {\r\n      'Service': 'Veterinary Assitance',\r\n      'Cost/Unit': 50,\r\n      'Unit': '1 Hour',\r\n      'Units Requested': 12\r\n    }, {\r\n      'Service': 'Veterinary Assitance',\r\n      'Cost/Unit': 50,\r\n      'Unit': '1 Hour',\r\n      'Units Requested': 12\r\n    }, {\r\n      'Service': 'Veterinary Assitance',\r\n      'Cost/Unit': 50,\r\n      'Unit': '1 Hour',\r\n      'Units Requested': 12\r\n    }, {\r\n      'Service': 'foo',\r\n      'Unit': null,\r\n      'Cost/Unit': undefined,\r\n      'Units Requested': 42\r\n    }]\r\n  };\r\n\r\n\r\nclass TableClass extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            data: {columns: [], rows: []},\r\n            totalEarning: 0,\r\n            conditions: {\r\n              cardId: \"\",\r\n              assigned_to: \"\",\r\n              auction_status: \"\",\r\n              received_time: \"\",\r\n            },\r\n        };\r\n    }\r\n    \r\n    setDataValues = () =>\r\n    {\r\n        let myConditions = {...this.state.conditions};\r\n    \r\n        fetch(constants.url + '/getAuctionData',{\r\n            method: 'post',\r\n            headers: {'Content-Type': 'application/json'},\r\n            body: JSON.stringify({\r\n            email: this.props.data.email,\r\n            apikey: this.props.data.apikey,\r\n            conditions: this.state.conditions\r\n            })\r\n        })\r\n        .then(response => response.json())             \r\n        .then(data => {\r\n            console.log(\"Data is: \", data);\r\n            \r\n          if(!data.length)\r\n          {\r\n            notify.show(\"There were no records found in the server.\");\r\n              alert(\"No records found\");  \r\n          }\r\n\r\n          else\r\n          {\r\n            let values = [];\r\n            var totalEarned = 0;\r\n            if(Object.values(data))\r\n            {\r\n              values = data;\r\n              values.map(entry => {\r\n                totalEarned = totalEarned + entry.earned;\r\n                this.setState({\r\n                  data: {\r\n//                        columns: columns,\r\n                      rows: values\r\n                  },\r\n                totalEarning: totalEarned\r\n              });\r\n            })\r\n            }\r\n          }\r\n        })\r\n        .catch(function (error) {\r\n            console.log(\"Records error: \", error);\r\n            notify.show(\"There was an error trying to obtain records. Please try again shortly.\", \"error\", 10000);\r\n          });    \r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setDataValues();\r\n    }\r\n\r\n    onChange = (event) => {\r\n    //    console.log(\"Triggered: \",event.target);\r\n        let value = event.target.value;\r\n        let tempCondition = {...this.state.conditions};\r\n        if(event.target.id == \"assign\")\r\n        {\r\n          tempCondition.assigned_to = value;\r\n        }\r\n        if(event.target.id == \"status\")\r\n        {\r\n          tempCondition.auction_status = value;\r\n        }\r\n        if(event.target.id == \"date\")\r\n        {\r\n          tempCondition.received_time = value;\r\n        }\r\n        if(event.target.id == \"cardid\")\r\n        {\r\n          tempCondition.cardId = value;\r\n        }\r\n        this.setState({\r\n          conditions: tempCondition\r\n        }, () => this.setDataValues()\r\n        );\r\n    }\r\n\r\n    onClickGoBack = () => {\r\n          this.props.updateRoute(\"App\");\r\n    }\r\n\r\n\r\n    render() {\r\n    //    console.log(this.state.data);\r\n\r\n        let tempConditions = {\r\n          cardId: \"\",\r\n          assigned_to: \"\",\r\n          auction_status: \"\",\r\n          received_time: \"\",\r\n        };\r\n\r\n        if(this.state.conditions.cardId)\r\n        {\r\n            tempConditions.cardId = this.state.conditions.cardId;\r\n        }\r\n        if(this.state.conditions.assigned_to)\r\n        {\r\n            tempConditions.assigned_to = this.state.conditions.assigned_to;\r\n        }\r\n        if(this.state.conditions.auction_status)\r\n        {\r\n            tempConditions.auction_status = this.state.conditions.auction_status;\r\n        }\r\n        if(this.state.conditions.received_time)\r\n        {\r\n            tempConditions.received_time = this.state.conditions.received_time;\r\n        }\r\n\r\n        // Data\r\n\r\n        // var dataColumns = tableData.columns;\r\n        // var dataRows = tableData.rows;\r\n\r\n        var dataColumns = [\"cardId\", \"tradeId\", \"player_details\", \"earned\", \"assigned_to\", \"auction_status\", \"received_time\"];\r\n\r\n        var dataRows = [];\r\n\r\n        // var dat\r\n\r\n      if(this.state.data.rows)\r\n      {\r\n//          dataColumns = this.state.data.columns;\r\n          dataRows = this.state.data.rows;\r\n      }\r\n      else\r\n      {\r\n//        dataColumns = [\"Card ID\", \"Trade ID\", \"Player Details\", \"Earned\", \"Assigned To\", \"Auction Status\", \"Received Time\"];\r\n      }\r\n    //   console.log\r\n      var tableHeaders = (<thead>\r\n            <tr>\r\n              {dataColumns.map(function(column) {\r\n                return <th>{column}</th>; })}\r\n            </tr>\r\n        </thead>);\r\n  \r\n      var tableBody = dataRows.map(function(row) {\r\n        return (\r\n          <tr>\r\n            {dataColumns.map(function(column) {\r\n              return <td>{row[column]}</td>; })}\r\n          </tr>); });\r\n       \r\n      // Decorate with Bootstrap CSS\r\n      return (\r\n        <div style = {{height: \"700px\", overflow:\"scroll\", color: \"white\"}}>\r\n        <Notifications />\r\n            <div style={{display: \"flex\", width: \"100%\"}}>\r\n\r\n                    <div style={{width: \"20%\"}}>\r\n                        <div style={{marginTop: \"5%\", marginLeft: \"5%\"}}>\r\n                          <h2 style={{color: \"gold\"}}>Total Earned is: </h2>\r\n                          <h2 style={{color: \"chartreuse\"}}>{Math.floor(this.state.totalEarning)}</h2>\r\n                        </div>\r\n                        <div>                          \r\n                          <button \r\n                          style = {{backgroundColor: \"black\", color:\"red\", borderColor: \"gold\", \r\n                                width: \"auto\", height: \"auto\", padding: \"8px\", margin: \"30px 50px\"}}                        \r\n                          onClick={this.onClickGoBack}>Go Back</button>\r\n                        </div>\r\n                    </div>\r\n\r\n\r\n                    <div style={{display:\"flex\", width: \"80%\", marginLeft: \"5%\"}}>\r\n                      <div style={{ width: \"40%\", }}>\r\n                      <h4>Card ID: </h4>\r\n                      <input id=\"cardid\" style={{marginLeft: '10px', borderColor: \"gold\", borderWidth: \"3px\",\r\n                                      backgroundColor: \"#3A4245\", color: \"gold\", textAlign: \"center\",\r\n                                    width: \"200px\", height: \"30px\"\r\n                              }}\r\n                          placeholder= \"\" \r\n                          value = {`${tempConditions.cardId}`}\r\n                          onChange={this.onChange} ></input>\r\n                      <h4>Assigned To: </h4>\r\n                      <input id=\"assign\" style={{marginLeft: '10px', borderColor: \"gold\", borderWidth: \"3px\",\r\n                                      backgroundColor: \"#3A4245\", color: \"gold\", textAlign: \"center\",\r\n                                    width: \"200px\", height: \"30px\"\r\n                              }}\r\n                          placeholder= \"\" \r\n                          value = {`${tempConditions.assigned_to}`}\r\n                          onChange={this.onChange} ></input>\r\n\r\n                      </div>                    \r\n                      <div style={{ width: \"40%\", }}>\r\n                      <h4>Auction Status: </h4>\r\n                      <input id=\"status\" style={{marginLeft: '10px', borderColor: \"gold\", borderWidth: \"3px\",\r\n                                      backgroundColor: \"#3A4245\", color: \"gold\", textAlign: \"center\",\r\n                                    width: \"200px\", height: \"30px\"\r\n                              }}\r\n                          placeholder= \"\" \r\n                          value = {`${tempConditions.auction_status}`}\r\n                          onChange={this.onChange} ></input>\r\n                      <h4>Received Time: </h4>\r\n                      <input id=\"date\" style={{marginLeft: '10px', borderColor: \"gold\", borderWidth: \"3px\",\r\n                                      backgroundColor: \"#3A4245\", color: \"gold\", textAlign: \"center\",\r\n                                    width: \"200px\", height: \"30px\"\r\n                              }}\r\n                          placeholder= \"\" \r\n                          value = {`${tempConditions.received_time}`}\r\n                          onChange={this.onChange} ></input>\r\n                      </div>\r\n                    </div>\r\n            </div>\r\n              <br />\r\n              <hr style={{borderBottom:\"1px dashed black\"}}/>\r\n              <br />\r\n            <table className=\"table table-bordered table-hover\" width=\"100%\">\r\n                {tableHeaders}\r\n                {tableBody}\r\n            </table>\r\n        </div>\r\n      ) \r\n    }\r\n}\r\n          \r\n\r\nexport default TableClass;\r\n","import React from 'react';\r\nimport constants from './constants';\r\nimport './Register.css';\r\nimport Notifications, {notify} from 'react-notify-toast';\r\n\r\nconst bcrypt = require('bcrypt-nodejs');\r\n\r\nconst axios = require('axios');\r\n\r\n\r\nclass Register extends React.Component {\r\n\r\n    constructor(props){\r\n      super(props);\r\n\r\n      this.state = {\r\n        email: '',\r\n        password: '',\r\n        name:''\r\n      }\r\n\r\n    }\r\n\r\n    onNameChange = (event) => {\r\n      this.setState({name: event.target.value});\r\n    }\r\n\r\n    onEmailChange = (event) => {\r\n      this.setState({email: event.target.value});\r\n    }\r\n\r\n    onPasswordChange = (event) => {\r\n      this.setState({password: event.target.value});\r\n    }\r\n\r\n    hasNumber = (myString) => {\r\n      return /\\d/.test(myString);\r\n    }\r\n\r\n    onSubmitRegistration = () => {\r\n\r\n      const {email, password, name} = this.state;\r\n      if(!email || !password || !name)\r\n      {\r\n        if(!email)\r\n        {\r\n          notify.show(\"Email field can't be empty\");\r\n        }\r\n        else if(!password)\r\n        {\r\n          notify.show(\"Passwod field can't be empty\");\r\n        }\r\n        if(!name)\r\n        {\r\n          notify.show(\"Name field can't be empty\");\r\n        }\r\n      }\r\n      else if(this.hasNumber(name))\r\n      {\r\n        alert(\"Name can only contain alphabets.\");\r\n      }\r\n      else\r\n      {\r\n\r\n        fetch('https://gentle-everglades-47985.herokuapp.com/register',{\r\n          method: 'post',\r\n          headers: {'Content-Type': 'application/json'},\r\n          body: JSON.stringify({\r\n          email: this.state.email,\r\n          password: this.state.password,\r\n          name: this.state.name,\r\n          })\r\n        })\r\n        .then(response => response.json())\r\n        .then(user => {\r\n      //    console.log(user);\r\n          if(user === true)\r\n          {        \r\n            alert(\"Registration successful!\");\r\n            this.props.ChangeState2('Administrator','');\r\n          }\r\n          else if (user === false)\r\n          {\r\n            alert(\"Error entering student!\");\r\n          }\r\n          else {\r\n            alert(\"This user already is registered!\");\r\n          }\r\n        })\r\n\r\n      }\r\n    }\r\n\r\n    async hashString(input){\r\n      var hashWord = \"\";\r\n      if(input.length > 0)\r\n      {\r\n        hashWord = await bcrypt.hash(input, null, null, function(err, hash) {\r\n            // Store hash in your password DB.\r\n              return hash;\r\n        })\r\n      //  console.log('hashword ', hashWord);\r\n        return await hashWord;\r\n      }\r\n    }\r\n\r\n    onSubmitReg2 = () => {\r\n\r\n      const {email, password, name} = this.state;\r\n      if(!email || !password || !name)\r\n      {\r\n        if(!email)\r\n        {\r\n          alert(\"Email field can't be empty\");\r\n        }\r\n        if(!password)\r\n        {\r\n          alert(\"Password field can't be empty\");\r\n        }\r\n        if(!name)\r\n        {\r\n          alert(\"Name field can't be empty\");\r\n        }\r\n      }\r\n      else if(this.hasNumber(name))\r\n      {\r\n        alert(\"Name can only contain alphabets.\");\r\n      }\r\n      else\r\n      {\r\n        let myHash = \"\";\r\n          let that = this;\r\n          bcrypt.hash(this.state.password, null, null, function(err, hash) {\r\n              // Store hash in your password DB.\r\n                if(!err)\r\n                {\r\n                  myHash = hash;\r\n          //        console.log('myHash ', myHash);\r\n\r\n          //        console.log('hash ', myHash);\r\n                  if(myHash.length > 0)\r\n                  {\r\n                    axios.post(constants.url + '/register', {\r\n                      email: that.state.email,\r\n                      password: myHash,\r\n                      name: that.state.name,\r\n                    })\r\n                    .then(user => {\r\n                      if(user.status === 200)\r\n                      {        \r\n                        alert(\"Registration successful!\");\r\n                        that.props.updateRoute(\"Login\");\r\n                      }\r\n                      else if (user.status === 400)\r\n                      {\r\n                        alert(\"This user already is registered!\");\r\n                      }\r\n                    })\r\n                    .catch(err => notify.show(\"The page behaved unexpectedly while trying to register. Please try again shortly.\", \"error\", 10000));\r\n                  }\r\n                  else\r\n                  {\r\n                    notify.show(\"The page behaved unexpectedly while trying to register. Please try again shortly.\", \"error\", 10000);\r\n                  }\r\n                }\r\n                else\r\n                {\r\n                  notify.show(\"The page behaved unexpectedly while trying to register. Please try again shortly.\", \"error\", 10000);\r\n                }\r\n        })\r\n      }\r\n    }\r\n\r\n    onSubmitReg1 = () =>\r\n  {\r\n    this.props.updateRoute(\"Login\");\r\n  }\r\n\r\n    onClickSignInButton = () => {\r\n      this.props.updateRoute(\"Login\");\r\n    }\r\n\r\n    render (){\r\n      return (\r\n        <div>\r\n        <Notifications />\r\n        <article className=\"br3 w-100 w-50-m w-25-l mw6 shadow-5 center registerbox\">\r\n        <main className=\"pa4 black-80\">\r\n        <div className=\"measure\">\r\n          <fieldset id=\"sign_up\" className=\"ba b--transparent ph0 mh0\">\r\n            <legend className=\"f1 fw6 ph0 mh0 myTColor\">Register</legend>\r\n            <div className=\"mt1\">\r\n              <label className=\"db fw6 lh-copy f4 myTColor\" htmlFor=\"name\">Name</label>\r\n              <input \r\n              className=\"pa2 w-100\" \r\n              type=\"text\" \r\n              name=\"name\"  \r\n              id=\"name\"\r\n              onChange={this.onNameChange}\r\n              />\r\n            </div>\r\n            <div className=\"mt1\">\r\n              <label className=\"db fw6 lh-copy f4 myTColor\" htmlFor=\"email-address\">Email</label>\r\n              <input \r\n              className=\"pa2 w-100\" \r\n              type=\"email\" \r\n              name=\"email-address\"  \r\n              id=\"email-address\"\r\n              onChange={this.onEmailChange}\r\n              />\r\n            </div>\r\n            <div className=\"mv1\">\r\n              <label className=\"db fw6 lh-copy f4 myTColor\" htmlFor=\"password\">Password</label>\r\n              <input \r\n              className=\"pa2 w-100\" \r\n              type=\"password\" \r\n              name=\"password\"  \r\n              id=\"password\"\r\n              onChange={this.onPasswordChange}\r\n              />\r\n            </div>\r\n          </fieldset>\r\n          <div className=\"\">\r\n            <input \r\n            onClick = {this.onSubmitReg2}\r\n            className=\"input b ph3 pv2 input-reset ba b--black hover-bg-green grow pointer f6 dib\" \r\n            type=\"submit\" \r\n            value=\"Register\"/>\r\n            <input \r\n            onClick = {this.onClickSignInButton}\r\n            className=\"input b ph3 pv2 input-reset ba b--black hover-bg-green grow pointer f6 dib\" \r\n            type=\"submit\" \r\n            value=\"Sign In\"/>\r\n          </div>\r\n        </div>\r\n      </main>\r\n      </article>\r\n    </div>\r\n    );\r\n\r\n  }\r\n\r\n}\r\n\r\nexport default Register;","import React, { Component } from 'react';\r\nimport Modal from 'react-awesome-modal';\r\nimport Sound from 'react-sound';\r\nimport Notifications, {notify} from 'react-notify-toast';\r\nimport ReactLoading from 'react-loading';\r\nimport ReactCountdownClock from 'react-countdown-clock';\r\nimport constants from './constants';\r\nimport Register from './Register';\r\n\r\n\r\nclass PlayerHandler extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            displayData: <h3></h3>,\r\n            buttonText: \"Request Players.\",\r\n            searching: false,\r\n            noPlayerDisplay: <h3>Press \"Request Data\" to check for available players.</h3>,\r\n            playerData: [],\r\n            email: this.props.data.email,\r\n            apikey: this.props.data.apikey,\r\n            isAdmin: this.props.data.email == 'admin@themarket.org' ? true : false,\r\n\r\n            billingRate: \"Fetching Billing Rate. Please refresh if it doesn't update in 10 seconds.\",\r\n            playersLeft: 0,\r\n            instance: \"\",\r\n            maxPlayers: 2,\r\n            visible: false,\r\n            cardid: 0,\r\n            playSoundStatus: \"STOPPED\"\r\n        }        \r\n    }\r\n\r\n    openModal = (cancelid) => {\r\n        this.setState({\r\n            visible : true,\r\n            cardid: cancelid\r\n        });\r\n    }\r\n\r\n    clickModalOK = () =>\r\n    {           \r\n        fetch(constants.url + '/cancelAuction',{\r\n            method: 'post',\r\n            headers: {'Content-Type': 'application/json'},\r\n            body: JSON.stringify({\r\n            cancelId: this.state.cardid,\r\n            })\r\n        })\r\n        .then(response => response.json())             \r\n        .then(data => {\r\n//            console.log(\"Cancel request returned: \", data.msg);\r\n            if(data.ret == 0)\r\n            {\r\n                notify.show((\"The purchase was successfully cancelled.\"), \"error\", 6000);\r\n            }\r\n            else\r\n            {\r\n                notify.show(`The purchase cannot be cancelled. Reason: ${data.msg}`, \"warning\", 6000);\r\n                // this.setState({noPlayerDisplay: <h3>{`${data.message} \\t`}</h3>})\r\n            }\r\n\r\n            let currPlayers = [...this.state.playerData];\r\n\r\n            currPlayers.forEach((element,index) =>\r\n            {\r\n                let tempID = this.state.cardid;\r\n                if(element.cardID == tempID)\r\n                {\r\n                    currPlayers.splice(index, 1);\r\n                }\r\n            });\r\n\r\n            this.setState(\r\n                {cardid: 0, playerData: currPlayers, visible: false},\r\n                () => this.displayPlayerData(currPlayers)                \r\n                );\r\n        })\r\n        .catch(function (error) {\r\n            notify.show((error), \"error\", 5000);\r\n            this.setState({cardid: 0, visible: false});\r\n        });\r\n    }\r\n\r\n    closeModal = () => {\r\n        this.setState({\r\n            cardid: 0,\r\n            visible : false\r\n        });\r\n    }\r\n\r\n    timeHandler(timeRem)\r\n    {\r\n        let Date1 = Math.floor( new Date().getTime()/1000 );\r\n        let Date2 = timeRem;\r\n        let Date3 = Date1 + 300;\r\n\r\n        var timeToExpire = Date3 - Date1;\r\n        \r\n        var secdiff = Date2 - Date1; \r\n    //    console.log((\"Seconds to expire: \", secdiff));\r\n        var mindiff = Math.floor( secdiff / 60 );\r\n        secdiff = secdiff % 60;\r\n        var hourdiff = Math.floor( mindiff / 60 );\r\n        mindiff = mindiff % 60;\r\n        var daydiff = Math.floor( hourdiff / 24 );\r\n        hourdiff = hourdiff % 24;\r\n        \r\n        const diff = {\r\n            days: daydiff,\r\n            hours: hourdiff,\r\n            minutes: mindiff,\r\n            timeToExp: timeToExpire\r\n        };\r\n    \r\n        return diff;\r\n    }\r\n\r\n    storePlayerData = (data) => \r\n    {\r\n        let prevData = this.state.playerData;\r\n//        console.log(\"Data is: \", data.data);\r\n        let tempData = data.data.map(element => {\r\n            const { player_name, player_rating, position, startingBid, buyNowPrice, tradeState, cardId, expires, tradeId} = element;\r\n            let remTime = this.timeHandler(expires);\r\n    //        console.log(\"Rem time is: \", remTime);\r\n            //            let randomID = Math.floor(Math.random() * 16739589301);\r\n            return {\r\n                name: player_name,\r\n                position: position,\r\n                rating: player_rating,\r\n                startingBid: startingBid,\r\n                buyNowPrice: buyNowPrice,\r\n                cardID: cardId,\r\n                tradeID: tradeId,\r\n                status: tradeState,\r\n                expires: (Math.floor( new Date().getTime()/1000)) + 270,\r\n                time: {days: remTime.days,hours: remTime.hours, minutes: remTime.minutes}\r\n            };\r\n        });\r\n        let newData = [...prevData, ...tempData];\r\n        let notBought = 0;\r\n        newData.forEach(element =>\r\n            {\r\n                if(element.status == \"active\")\r\n                {\r\n                    notBought++;\r\n                }\r\n                else\r\n                {\r\n\r\n                }\r\n        })\r\n        this.setState({playerData: newData, playersLeft: notBought},() => {\r\n            this.displayPlayerData(newData);\r\n        });\r\n    }\r\n\r\n    displayPlayerData = (myData) =>\r\n    {\r\n        // console.log(\"New data is: \", data);\r\n        let that = this;\r\n        const buttonStyle =\r\n        {\r\n            backgroundColor: \"green\",\r\n            color: \"yellow\",\r\n            width: \"80px\",\r\n            margin: \"10px 10px\",\r\n            height: \"auto\",\r\n            padding: \"5px\",\r\n            fontSize: \"20px\"\r\n        };\r\n\r\n        const cancelButtonStyle =\r\n        {\r\n            backgroundColor: \"red\",\r\n            color: \"white\",\r\n            width: \"80px\",\r\n            margin: \"10px 10px\",\r\n            height: \"auto\",\r\n            padding: \"5px\",\r\n            fontSize: \"20px\"\r\n        };\r\n\r\n        const cardStyle =\r\n        {\r\n            backgroundColor: \"#3A4245\",\r\n            color: \"chartreuse\",\r\n            border: \"2px solid gold\",\r\n            width: \"250px\",\r\n            margin: \"10px 10px\"\r\n        };\r\n\r\n        let toBeDisplayed = myData.map((player,index) =>\r\n            {\r\n                return (\r\n                    <div id = {index} cardID = {player.cardID} tradeID = {player.tradeID} key = {index} style={cardStyle}>\r\n                        <h2>Name: {player.name}</h2>\r\n                        <h3>Rating: {player.rating}</h3>\r\n                        <h3>Position: {player.position}</h3>\r\n                        <h3>Starting bid: {player.startingBid}</h3>\r\n                        <h3>Buy Now Price: {player.buyNowPrice}</h3>\r\n                        <h3>Listing Time:</h3>\r\n                        <h3>{player.time.days} day(s), {player.time.hours} hours, {player.time.minutes} minutes.</h3>\r\n                        <h3>Player Expires:</h3>\r\n                        <div style={{marginLeft: \"20px\"}}>\r\n                        <ReactCountdownClock seconds= {player.expires - (Math.floor( new Date().getTime()/1000))}\r\n                        color=\"darkorange\"\r\n                        alpha={1}\r\n                        timeFormat=\"hms\"\r\n                        size={90}\r\n                        onComplete={() => notify.show((\"The player \" + `${player.name}` + \" has expired.\"),(\"error\"),(5000))} />\r\n                        </div>\r\n                        <h3>Auction Status: {player.status}</h3>\r\n                        <div>\r\n                        <button style={buttonStyle} onClick = {(event) => this.onBuyClick(event,player.cardID)}>Bought</button>\r\n                        <button style={cancelButtonStyle} onClick = {(event) => this.onCancelClick(event,player.cardID)}>Cancel</button>\r\n                        </div>\r\n                    </div> \r\n                );\r\n        })\r\n        \r\n        // console.log(\"To be displayed: \", toBeDisplayed);\r\n        this.setState({noPlayerDisplay: <h2>Updating....</h2>});\r\n\r\n        this.setState({\r\n            displayData: \r\n            <div style={{display:'inline-flex', justifyContent: 'center'}}>\r\n            {toBeDisplayed}\r\n            </div>,\r\n            noPlayerDisplay:\r\n            <h3></h3>\r\n        });\r\n    }\r\n\r\n    onCancelClick = (event, tradeid) =>\r\n    {\r\n//        console.log(\"Cancel requested for :\", tradeid);\r\n//        <input type=\"button\" value=\"Open\" onClick={() => this.openModal()} />\r\n        this.openModal(tradeid);\r\n    }\r\n\r\n    onBuyClick = (event,tradeid) => {\r\n//        console.log(\"Purchase requested for: \", tradeid);\r\n        let notBought = this.state.playersLeft;\r\n\r\n        let currPlayers = [...this.state.playerData];\r\n\r\n        currPlayers.forEach((element, index) => {\r\n            if(element.cardID == tradeid)\r\n            {\r\n                currPlayers[index].status=\"pending server response\";\r\n                this.checkBoughtStatus(tradeid, currPlayers, index, notBought);\r\n            }\r\n        })\r\n    }    \r\n\r\n    checkBoughtStatus = (playerID, currPlayers, index, notBought) =>\r\n    {\r\n//        console.log(\"Checking purchase status for: \", playerID);\r\n\r\n        fetch(constants.url + '/checkAuctionStatus',{\r\n            method: 'post',\r\n            headers: {'Content-Type': 'application/json'},\r\n            body: JSON.stringify({\r\n            tradeID: playerID\r\n            })\r\n        })\r\n        .then(response => response.json())             \r\n        .then(data => {\r\n            if(data.data)\r\n            {\r\n                if(data.data.tradeState)\r\n                {\r\n                    if(data.data.tradeState == 'closed')\r\n                    {\r\n                        notify.show((\"CONGRATULATIONS! \" + `${currPlayers[index].name}` + \" has been bought!.\"),(\"success\"), (5000));\r\n                        currPlayers[index].status = \"Bought!\";\r\n                        currPlayers.splice(index,1);\r\n                        // console.log(\"State Data: \", this.state.Data);\r\n             //           console.log(\"Curr Players: \", currPlayers);\r\n                        if(notBought > 0)\r\n                        {\r\n                            notBought--;\r\n            //                console.log(\"Players to be bought: \", notBought);\r\n                        }\r\n                        this.setState({playerData: currPlayers, playersLeft: notBought}, () => this.displayPlayerData(currPlayers));\r\n                    }\r\n                    else if(data.data.tradeState == 'expired')\r\n                    {\r\n                        // console.log(`You took too long buyg`);\r\n                        notify.show((\"Unfortunately, listing for \" + `${currPlayers[index].name}` + \" has EXPIRED and was not bought.\"),(\"error\"),(8000));\r\n                        currPlayers[index].status = \"This player has expired.\";\r\n                        // currPlayers.splice(index,1);\r\n                        // console.log(\"State Data: \", this.state.Data);\r\n           //             console.log(\"Curr Players: \", currPlayers);\r\n                        // if(notBought > 0)\r\n                        // {\r\n                        //     notBought--;\r\n                        //     console.log(\"Players to be bought: \", notBought);\r\n                        // }\r\n                        this.setState({playerData: currPlayers, playersLeft: notBought}, () => this.displayPlayerData(currPlayers));\r\n                    }\r\n                    else if(data.data.tradeState == 'active')\r\n                    {\r\n                        // console.log(`You took too long buyg`);\r\n                        notify.show((`${currPlayers[index].name}` + \" has not been bought yet!.\"),(\"warning\"), (8000));\r\n                        currPlayers[index].status = \"NOT Bought yet.\";\r\n                        // currPlayers.splice(index,1);\r\n                        // console.log(\"State Data: \", this.state.Data);\r\n       //                 console.log(\"Curr Players: \", currPlayers);\r\n                        // if(notBought > 0)\r\n                        // {\r\n                        //     notBought--;\r\n                        //     console.log(\"Players to be bought: \", notBought);\r\n                        // }\r\n                        this.setState({playerData: currPlayers, playersLeft: notBought}, () => this.displayPlayerData(currPlayers));\r\n                    }\r\n                }\r\n            }\r\n            else\r\n            {                \r\n                console.log(`Trade ID ${playerID}` + \" has not been bought.\");\r\n                notify.show((\"An error occured while checking status.\\nPlease retry after 2 minutes.\"), (\"warning\"), (7500));\r\n                currPlayers[index].status = \"Please re-click me after 2 minutes\";\r\n                this.setState({playerData: currPlayers, playersLeft: notBought}, () => this.displayPlayerData(currPlayers));\r\n                console.log(\"Server response for status check: \", data);\r\n            }\r\n    })\r\n        .catch(function (error) {\r\n            console.log(\"Server error for status check: \", error);\r\n            notify.show((\"An error occured while checking status.\\nPlease retry after 2 minutes.\"), (\"warning\"), (7500));\r\n            currPlayers[index].status = \"Please re-click me after 2 minutes\";\r\n            this.setState({playerData: currPlayers, playersLeft: notBought}, () => this.displayPlayerData(currPlayers));\r\n    });\r\n\r\n    }\r\n\r\n    onChange = (event) =>\r\n    {\r\n        if(event.target.value > 0)\r\n        {\r\n            if(event.target.value > 4)\r\n                this.setState({\r\n                    instance: 4,\r\n                    maxPlayers: 4\r\n                });\r\n            else\r\n            {\r\n                this.setState({\r\n                    instance: event.target.value,\r\n                    maxPlayers: event.target.value\r\n                });\r\n            }\r\n        }\r\n        else\r\n        {\r\n            this.setState({\r\n                instance: \"\",\r\n                maxPlayers: 2\r\n        });\r\n        }\r\n    }\r\n\r\n    onKeyDown = (event) =>\r\n    {\r\n        if(event.key == \"Enter\")\r\n        {\r\n            this.onSubmit();\r\n        }\r\n        else if(event.key == \"Shift\")\r\n        {\r\n            this.setState({playSoundStatus: \"STOPPED\"});\r\n        }\r\n    }\r\n\r\n    getDataFromServer = () =>\r\n    {\r\n        let max = this.state.maxPlayers;\r\n        if(this.state.playersLeft < max)\r\n        {\r\n            if(this.state.searching)\r\n            {\r\n//                let myEmail = this.state.isAdmin ? \"waqar@gmail.com\" : this.state.email;\r\n                setTimeout(() => {\r\n                    fetch(constants.url + '/getData',{\r\n                        method: 'post',\r\n                        headers: {'Content-Type': 'application/json'},\r\n                        body: JSON.stringify({\r\n                        email: this.state.email,\r\n                        apikey: this.state.apikey,\r\n                        instance: this.state.instance\r\n                        })\r\n                    })\r\n                    .then(response => response.json())             \r\n                    .then(data => {\r\n                        if(data.data)\r\n                        {\r\n                            if(this.state.playersLeft < max)\r\n                            {\r\n                                this.setState({playSoundStatus: \"PLAYING\"});\r\n                                this.storePlayerData(data);\r\n                                this.getDataFromServer();\r\n                            }\r\n                            else\r\n                            {                                \r\n                                this.setState({playSoundStatus: \"PLAYING\", buttonText: \"Request Players.\", searching: false});\r\n                                this.storePlayerData(data);\r\n                            }\r\n                        }\r\n                        else\r\n                        {\r\n                            console.log(\"Response: \", data.message);\r\n                            this.getDataFromServer();\r\n                            //                    this.setState({noPlayerDisplay: <h3>{`${data.message} \\t`}</h3>})\r\n                        }\r\n                    })\r\n                    .catch(function (error) {\r\n                        notify.show(\"Unexpected error occured while requesting players. Please try later or contact the administrator if the problem persists.\", \"warning\", 15000);\r\n                    });    \r\n                }, 500);\r\n            }\r\n        }        \r\n        else\r\n        {\r\n//            const players = this.state.playersLeft;\r\n//            alert(`Please buy the remaining ${players} player(s) before requesting new players.`);\r\n              this.setState({playSoundStatus: \"PLAYING\", buttonText: \"Request Players.\", searching: false});\r\n//              this.storePlayerData(data);\r\n        }\r\n    }\r\n    \r\n    onSubmit = () =>\r\n    {\r\n        if(this.state.buttonText == \"Stop Requesting Players.\")\r\n        {\r\n            this.setState({\r\n                buttonText: \"Request Players.\", \r\n                noPlayerDisplay: <h3>Press \"Request Players\" to search for players....</h3>, \r\n                searching: false\r\n            });\r\n        }\r\n        else{\r\n            this.setState({\r\n            buttonText: \"Stop Requesting Players.\", \r\n            noPlayerDisplay: <h3>Searching for players....</h3>, \r\n            searching: true},\r\n            () => this.getDataFromServer()\r\n            );\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        \r\n        window.addEventListener(\"beforeunload\", (ev) => {\r\n            ev.preventDefault();\r\n            this.setState({\r\n                searching: false\r\n            }, () => this.onClickSignOut());\r\n        });\r\n\r\n        fetch(constants.url + '/pricefetch')\r\n        .then(response => response.json())\r\n        .then(data => {\r\n//            console.log(\"Data for todays rate is: \", data);\r\n            if(data.billingRate)\r\n            {\r\n                const billRate = data.billingRate;\r\n//                const billRate = 0.080;\r\n                let newRate = billRate - 0.003;\r\n                newRate = Math.floor(newRate * 100 * 158 * 0.52);\r\n                this.setState({billingRate: `PKR ${newRate} / 100K`});\r\n                //per 1000 coins = 0.052 euro;\r\n                //per 100,000 = 5.2 euro;\r\n                //5.2 euro in pkr = 820.0 rs\r\n                //give client 425.0 rs.\r\n                // we get 395 rs per 100k.\r\n\r\n\r\n                // STEPS FOR CALCULATION\r\n                // newRate = rate - 0.003;\r\n                // newRate = newRate * 100; (per 100K)\r\n                // newRate = newRate * 158; (per 100K in PKR).\r\n                // showToClient = newRate * 0.52; (per 100K in PKR - our profit)\r\n                // display = \"Today's rate is {showToClient} per 100K\";\r\n\r\n\r\n            }\r\n        })\r\n        .catch(err => notify.show(\"Error while fetching rate from server. Please re-login to get today's rate.\", \"warning\", 7500));\r\n    }\r\n    \r\n    onClickSignOut = () => {\r\n\r\n        let email = this.state.email;\r\n\r\n        fetch(constants.url + '/signout',{\r\n            method: 'post',\r\n            headers: {'Content-Type': 'application/json'},\r\n            body: JSON.stringify({\r\n            email: email\r\n            })\r\n        })\r\n        .then(response => response.json())             \r\n        .then(data => {\r\n            console.log(\"Logged out.\");\r\n            this.props.updateRoute(\"Login\");\r\n        })\r\n        .catch(err => notify.show(\"The page behaved unexpectedly while trying to log out. You can safely close the browser now.\", \"success\", 7000));\r\n    }\r\n\r\n    onClickTable = () =>\r\n    {\r\n        this.props.updateRoute(\"Table\");\r\n    }\r\n\r\n    onClickRegister = () =>\r\n    {\r\n        this.props.updateRoute(\"Register\");\r\n    }\r\n\r\n    signOutAllUsers = () =>\r\n    {\r\n        fetch(constants.url + '/supersignout',{\r\n            method: 'post',\r\n            headers: {'Content-Type': 'application/json'},\r\n            body: JSON.stringify({\r\n            email: this.state.email\r\n            })\r\n        })\r\n        .then(response => response.json())             \r\n        .then(data => {\r\n            if(data.message == \"SUCCESS\")\r\n            {\r\n                notify.show(\"All users logged out.\", \"success\", 6000);\r\n            }\r\n            else\r\n            {\r\n                notify.show(\"The page behaved unexpectedly while trying to log out. Please try again shortly.\", \"error\", 10000);\r\n            }\r\n        })\r\n        .catch(err => notify.show(\"The page behaved unexpectedly while trying to log out. Please try again shortly.\", \"error\", 10000));\r\n    }\r\n\r\n    render() {\r\n        let isAdminStatus = this.state.isAdmin;\r\n    //    console.log(\"isAdmin :\", isAdminStatus);\r\n        let superLogOut = null;\r\n        if(isAdminStatus)\r\n        {\r\n            superLogOut = \r\n            <div>\r\n            <button \r\n            style = {{backgroundColor: \"black\", color:\"white\", borderColor: \"gold\", \r\n                  width: \"auto\", height: \"auto\", padding: \"8px\", margin: \"30px 50px\"}}                        \r\n            onClick={this.onClickTable}>Records</button>\r\n            <button \r\n            style = {{backgroundColor: \"black\", color:\"red\", borderColor: \"gold\", \r\n                  width: \"auto\", height: \"auto\", padding: \"8px\", margin: \"30px 50px\"}}                        \r\n            onClick={this.signOutAllUsers}>Log ALL USERS Out</button>\r\n            <button \r\n            style = {{backgroundColor: \"black\", color:\"chartreuse\", borderColor: \"gold\", \r\n            width: \"auto\", height: \"auto\", padding: \"8px\", margin: \"30px 50px\"}}                        \r\n            onClick={this.onClickRegister}>Register User</button>\r\n            </div>;\r\n        }\r\n\r\n        return (\r\n            <div>\r\n            <Notifications />\r\n            <div style={{display:\"flex\", width: \"100%\"}}  tabIndex = {1} key = {this.state.playersLeft} onKeyDown = {this.onKeyDown} >\r\n                    \r\n                    <div style = {{display:\"flex-start\", width: \"20%\"}} id = \"ALL NON-PLAYER INFO\">\r\n\r\n                    <div style={{display:'flex', justifyContent: 'center'}}>\r\n                    <h3 style ={{color: \"chartreuse\"}}>Today's rate is: {this.state.billingRate}</h3>\r\n                    </div>\r\n                    \r\n                    <div>\r\n                    <h4>Max no of players at once: </h4>\r\n                    <input style={{marginLeft: '10px', borderColor: \"gold\", borderWidth: \"3px\",\r\n                                    backgroundColor: \"#3A4245\", color: \"gold\", textAlign: \"center\",\r\n                                   width: \"100px\", height: \"25px\"\r\n                            }}\r\n                        placeholder= \"default is 2\" \r\n                        value = {this.state.instance}\r\n                        onChange={this.onChange} ></input>\r\n                    </div>\r\n\r\n                    <div>\r\n                    <button \r\n                    style={{backgroundColor: \"#3A4245\", color:\"gold\", borderColor: \"gold\",  \r\n                    width: \"120px\", height: \"auto\", padding: \"8px\", margin: \"50px 50px\"}}\r\n                    onClick = {() => this.setState({playSoundStatus: \"STOPPED\"})}>\r\n                    STOP SOUND\r\n                    </button>\r\n                    <button \r\n                    onClick={this.onSubmit}\r\n                    // #3A4245\r\n                    style = {{backgroundColor: \"#3A4245\", color:\"chartreuse\", borderColor: \"gold\", \r\n                              width: \"150px\", height: \"auto\", padding: \"4px\", margin: \"5px 50px\"}}\r\n                    >\r\n                    {this.state.buttonText.toUpperCase()}\r\n                    </button>\r\n                    </div>\r\n                    <div>\r\n                        <button \r\n                        style = {{backgroundColor: \"black\", color:\"red\", borderColor: \"gold\", \r\n                              width: \"auto\", height: \"auto\", padding: \"8px\", margin: \"30px 50px\"}}                        \r\n                        onClick={this.onClickSignOut}>Log Out</button>\r\n                        {superLogOut}\r\n                    </div>\r\n                    </div>\r\n\r\n\r\n\r\n                    <div id=\"PLAYER DATA\" style = {{display:\"flex-end\", width: \"80%\"}}>\r\n                        <div style = {{width: \"100%\", overflowX: \"auto\"}}>\r\n                            <div style={{marginLeft: \"45%\"}}>\r\n                            {this.state.searching ? <h3><ReactLoading type=\"spin\" color=\"chartreuse\"/></h3> : null}  \r\n                            </div>\r\n                            {this.state.displayData}\r\n                            <br />\r\n                            {this.state.noPlayerDisplay}\r\n                        </div>\r\n                    </div>\r\n\r\n            </div>\r\n\r\n            <div id=\"MODAL AND SOUND\">\r\n                    <section>\r\n                        {/* <input type=\"button\" value=\"Open\" onClick={() => this.openModal()} /> */}\r\n                        <Modal \r\n                            visible={this.state.visible}\r\n                            width=\"400\"\r\n                            height=\"300\"\r\n                            effect=\"fadeInUp\"\r\n                            style = {{backgroundColor: \"cadetblue\", color: \"gold\",\r\n                                    border: \"5px solid red\", borderSize: \"10px\"\r\n                            }}\r\n                            // onClickAway={() => this.closeModal()}\r\n                        >\r\n                            <div>\r\n                                <h1>Cancel Purchase</h1>\r\n                                <p>Are you sure you want to cancel the purchase of this player? Click YES to proceed, or NO to go back.</p>\r\n                                <br />\r\n                                <button onClick = {this.clickModalOK} \r\n                                style={{backgroundColor: \"red\", color: \"white\", width: \"100px\", height: \"50px\"}}>\r\n                                YES\r\n                                </button>\r\n                                <br />\r\n                                <br />\r\n                                <button onClick = {this.closeModal} \r\n                                style={{backgroundColor: \"green\", color: \"white\",width: \"100px\", height: \"50px\"}}>\r\n                                NO\r\n                                </button>\r\n                            </div>\r\n                        </Modal>\r\n                    </section>\r\n                    <Sound\r\n                    url=\"https://www.soundjay.com/button/beep-08b.mp3\"\r\n                    playStatus={this.state.playSoundStatus}\r\n                    playFromPosition={0 /* in milliseconds */}\r\n                    volume={100}\r\n                    autoLoad={true}\r\n                    loop={true}\r\n                    // onLoading={this.handleSongLoading}\r\n                    // onPlaying={this.handleSongPlaying}\r\n                    // onFinishedPlaying={this.handleSongFinishedPlaying}\r\n                    />\r\n            </div> \r\n\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default PlayerHandler;\r\n\r\n\r\n\r\n\r\n    // render1() {\r\n    //     return (\r\n    //         <div tabIndex = {1} key = {this.state.playersLeft} onKeyDown = {this.onKeyDown} >\r\n    //                 <div style={{display:'flex', justifyContent: 'center'}}>\r\n    //                 <h3 style ={{color: \"chartreuse\"}}>Today's rate is: {this.state.billingRate}</h3>\r\n    //                 </div>\r\n    //                 <div>\r\n    //                 <h4>Max no of players at once: </h4>\r\n    //                 <input style={{marginLeft: '10px', borderColor: \"gold\", borderWidth: \"3px\",\r\n    //                                 backgroundColor: \"#3A4245\", color: \"gold\", textAlign: \"center\",\r\n    //                                width: \"50px\", height: \"20px\"\r\n    //                         }}\r\n    //                     placeholder= \"\" \r\n    //                     value = {`${this.state.instance}`}\r\n    //                     onChange={this.onChange} ></input>\r\n    //                 </div>\r\n    //                 <div>\r\n    //                 {this.state.noPlayerDisplay}\r\n    //                 </div>\r\n    //                 <div>\r\n    //                 <button \r\n    //                 style={{backgroundColor: \"#3A4245\", color:\"gold\", borderColor: \"gold\",  \r\n    //                 width: \"auto\", height: \"auto\", padding: \"8px\", margin: \"0px 50px\"}}\r\n    //                 onClick = {() => this.setState({playSoundStatus: \"STOPPED\"})}>\r\n    //                 STOP SOUND\r\n    //                 </button>\r\n    //                 <button \r\n    //                 onClick={this.onSubmit}\r\n    //                 // #3A4245\r\n    //                 style = {{backgroundColor: \"#3A4245\", color:\"chartreuse\", borderColor: \"gold\", \r\n    //                           width: \"auto\", height: \"auto\", padding: \"8px\", margin: \"0px 50px\"}}\r\n    //                 >\r\n    //                 {this.state.buttonText.toUpperCase()}\r\n    //                 </button>\r\n    //                 </div>\r\n    //                 <div style={{display:'flex', justifyContent: \"center\", overflow: \"auto\", width: \"90%\", margin:\"auto auto\"}}>\r\n    //                 <div>\r\n    //                 {this.state.displayData}  \r\n    //                 </div>\r\n    //                 </div>\r\n    //                 <section>\r\n    //                     {/* <input type=\"button\" value=\"Open\" onClick={() => this.openModal()} /> */}\r\n    //                     <Modal \r\n    //                         visible={this.state.visible}\r\n    //                         width=\"400\"\r\n    //                         height=\"300\"\r\n    //                         effect=\"fadeInUp\"\r\n    //                         style = {{backgroundColor: \"cadetblue\", color: \"gold\",\r\n    //                                 border: \"5px solid red\", borderSize: \"10px\"\r\n    //                         }}\r\n    //                         // onClickAway={() => this.closeModal()}\r\n    //                     >\r\n    //                         <div>\r\n    //                             <h1>Cancel Purchase</h1>\r\n    //                             <p>Are you sure you want to cancel the purchase of this player? Click YES to proceed, or NO to go back.</p>\r\n    //                             <br />\r\n    //                             <button onClick = {this.clickModalOK} \r\n    //                             style={{backgroundColor: \"red\", color: \"white\", width: \"100px\", height: \"50px\"}}>\r\n    //                             YES\r\n    //                             </button>\r\n    //                             <br />\r\n    //                             <br />\r\n    //                             <button onClick = {this.closeModal} \r\n    //                             style={{backgroundColor: \"green\", color: \"white\",width: \"100px\", height: \"50px\"}}>\r\n    //                             NO\r\n    //                             </button>\r\n    //                         </div>\r\n    //                     </Modal>\r\n    //                 </section>\r\n    //                 <Sound\r\n    //                 url=\"https://www.soundjay.com/button/beep-08b.mp3\"\r\n    //                 playStatus={this.state.playSoundStatus}\r\n    //                 playFromPosition={0 /* in milliseconds */}\r\n    //                 volume={100}\r\n    //                 autoLoad={true}\r\n    //                 loop={true}\r\n    //                 // onLoading={this.handleSongLoading}\r\n    //                 // onPlaying={this.handleSongPlaying}\r\n    //                 // onFinishedPlaying={this.handleSongFinishedPlaying}\r\n    //                 />\r\n    //         </div> \r\n    //     );\r\n    // }\r\n","import React, { Component } from 'react';\nimport './App.css';\n// import PlayerData from './PlayerData';\nimport SignIn from './SignIn';\nimport TableClass from './TableClass';\nimport PlayerHandler from './PlayerHandler';\nimport 'tachyons';\nimport Register from './Register';\n\n// let cors = require('cors');\n// app.use(cors());\n\n\nvar display = null;\n\nclass App extends Component {\n\n  state = {\n    route: \"Login\",\n    email: \"\",\n    apikey: \"\",\n  };\n\n  updateRoute = (value) =>\n  {\n    this.setState({\n      route: value\n    });\n  }\n\n  setEmailAndApiKey = (email,key) => {\n\n    this.setState({\n      email: email,\n      apikey: key\n    });\n  };\n\n  onSubmit = (query) =>\n  {\n    let that = this;\n  }\n  \n  componentDidMount() {\n  }\n  \n\n  render() {\n    if(this.state.route == \"Login\")\n    {\n      display = \n      <div>\n      <SignIn updateRoute={this.updateRoute} setEmailAndApiKey={this.setEmailAndApiKey}/>\n      </div>\n    }\n    else if (this.state.route == \"Register\")\n    {\n      display = <Register updateRoute={this.updateRoute}/>\n    }\n    else if(this.state.route == \"App\")\n    {\n      display =  \n      <div>\n        <PlayerHandler data={this.state} updateRoute={this.updateRoute}/>\n      </div>\n    }\n    else if(this.state.route == \"Table\")\n    {\n      display =  \n      <div>\n        <TableClass data={this.state} updateRoute={this.updateRoute}/>\n      </div>\n    }\n    return (\n      <div className=\"App\">\n        <h2 style={{display: 'flex', justifyContent: 'center'}}>Welcome to FUT Player Market</h2>\n        {display}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}