{"version":3,"sources":["Register.js","SignIn.js","PlayerData.js","TableClass.js","PlayerHandler.js","App.js","serviceWorker.js","index.js"],"names":["bcrypt","require","Register","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onNameChange","event","setState","name","target","value","onEmailChange","email","onPasswordChange","password","hasNumber","myString","test","onSubmitRegistration","_this$state","state","alert","fetch","method","headers","Content-Type","body","JSON","stringify","then","response","json","user","console","log","ChangeState2","onSubmitReg2","_this$state2","myHash","that","assertThisInitialized","hash","err","length","status","updateRoute","catch","onSubmitReg1","onClickSignInButton","input","hashWord","react_default","a","createElement","className","id","htmlFor","type","onChange","onClick","React","Component","SignIn","signInEmail","signInPassword","onSubmitSignIn","result","ChangeState","rollno","message","updateEmailAndApiKey","setEmailAndApiKey","apiKey","validateLogIn","route","data","apikey","error","onSubmitSignIn1","_this2","TableClass","setDataValues","objectSpread","conditions","values","totalEarned","map","entry","earned","rows","totalEarning","tempCondition","assigned_to","auction_status","received_time","cardId","onClickGoBack","columns","tempConditions","dataColumns","dataRows","tableHeaders","column","tableBody","row","style","height","overflow","color","display","width","marginTop","marginLeft","Math","floor","backgroundColor","borderColor","padding","margin","borderWidth","textAlign","placeholder","concat","borderBottom","PlayerHandler","openModal","cancelid","cardid","visible","clickModalOK","cancelId","ret","notify","show","msg","currPlayers","toConsumableArray","playerData","forEach","element","index","tempID","cardID","splice","displayPlayerData","closeModal","storePlayerData","prevData","tempData","player_name","player_rating","position","startingBid","buyNowPrice","tradeState","expires","tradeId","remTime","timeHandler","rating","tradeID","time","days","hours","minutes","newData","notBought","playersLeft","myData","buttonStyle","fontSize","cancelButtonStyle","cardStyle","border","toBeDisplayed","player","key","onBuyClick","onCancelClick","noPlayerDisplay","displayData","justifyContent","tradeid","checkBoughtStatus","playerID","instance","maxPlayers","onKeyDown","onSubmit","playSoundStatus","getDataFromServer","max","searching","setTimeout","buttonText","onClickSignOut","onClickTable","signOutAllUsers","isAdmin","billingRate","timeRem","secdiff","Date","getTime","mindiff","hourdiff","_this3","newRate","_this4","isAdminStatus","superLogOut","notify_default","tabIndex","toUpperCase","overflowX","react_loading_default","lib_default","effect","borderSize","react_sound_lib_default","url","playStatus","playFromPosition","volume","autoLoad","loop","App","query","src_SignIn_0","src_Register_0","src_PlayerHandler","src_TableClass","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.57dc2ace.chunk.js","sourcesContent":["import React from 'react';\r\nimport axios from 'axios';\r\nimport './Register.css';\r\n\r\nconst bcrypt = require('bcrypt-nodejs');\r\n\r\n\r\n\r\nclass Register extends React.Component {\r\n\r\n    constructor(props){\r\n      super(props);\r\n\r\n      this.state = {\r\n        email: '',\r\n        password: '',\r\n        name:''\r\n      }\r\n\r\n    }\r\n\r\n    onNameChange = (event) => {\r\n      this.setState({name: event.target.value});\r\n    }\r\n\r\n    onEmailChange = (event) => {\r\n      this.setState({email: event.target.value});\r\n    }\r\n\r\n    onPasswordChange = (event) => {\r\n      this.setState({password: event.target.value});\r\n    }\r\n\r\n    hasNumber = (myString) => {\r\n      return /\\d/.test(myString);\r\n    }\r\n\r\n    onSubmitRegistration = () => {\r\n\r\n      const {email, password, name} = this.state;\r\n      if(!email || !password || !name)\r\n      {\r\n        if(!email)\r\n        {\r\n          alert(\"Email field can't be empty\");\r\n        }\r\n        else if(!password)\r\n        {\r\n          alert(\"Passwod field can't be empty\");\r\n        }\r\n        if(!name)\r\n        {\r\n          alert(\"Name field can't be empty\");\r\n        }\r\n      }\r\n      else if(this.hasNumber(name))\r\n      {\r\n        alert(\"Name can only contain alphabets.\");\r\n      }\r\n      else\r\n      {\r\n\r\n        fetch('https://gentle-everglades-47985.herokuapp.com/register',{\r\n          method: 'post',\r\n          headers: {'Content-Type': 'application/json'},\r\n          body: JSON.stringify({\r\n          email: this.state.email,\r\n          password: this.state.password,\r\n          name: this.state.name,\r\n          })\r\n        })\r\n        .then(response => response.json())\r\n        .then(user => {\r\n          console.log(user);\r\n          if(user === true)\r\n          {        \r\n            alert(\"Registration successful!\");\r\n            this.props.ChangeState2('Administrator','');\r\n          }\r\n          else if (user === false)\r\n          {\r\n            alert(\"Error entering student!\");\r\n          }\r\n          else {\r\n            alert(\"This user already is registered!\");\r\n          }\r\n        })\r\n\r\n      }\r\n    }\r\n\r\n    async hashString(input){\r\n      var hashWord = \"\";\r\n      if(input.length > 0)\r\n      {\r\n        hashWord = await bcrypt.hash(input, null, null, function(err, hash) {\r\n            // Store hash in your password DB.\r\n              return hash;\r\n        })\r\n        console.log('hashword ', hashWord);\r\n        return await hashWord;\r\n      }\r\n    }\r\n\r\n    onSubmitReg2 = () => {\r\n\r\n      const {email, password, name} = this.state;\r\n      if(!email || !password || !name)\r\n      {\r\n        if(!email)\r\n        {\r\n          alert(\"Email field can't be empty\");\r\n        }\r\n        if(!password)\r\n        {\r\n          alert(\"Password field can't be empty\");\r\n        }\r\n        if(!name)\r\n        {\r\n          alert(\"Name field can't be empty\");\r\n        }\r\n      }\r\n      else if(this.hasNumber(name))\r\n      {\r\n        alert(\"Name can only contain alphabets.\");\r\n      }\r\n      else\r\n      {\r\n        let myHash = \"\";\r\n          let that = this;\r\n          bcrypt.hash(this.state.password, null, null, function(err, hash) {\r\n              // Store hash in your password DB.\r\n                if(!err)\r\n                {\r\n                  myHash = hash;\r\n                  console.log('myHash ', myHash);\r\n\r\n                  console.log('hash ', myHash);\r\n                  if(myHash.length > 0)\r\n                  {\r\n                    fetch('http://localhost:3001/register',{\r\n                      method: 'post',\r\n                      headers: {'Content-Type': 'application/json'},\r\n                      body: JSON.stringify({\r\n                      email: that.state.email,\r\n                      password: myHash,\r\n                      name: that.state.name,\r\n                      })\r\n                    })\r\n                    .then(user => {\r\n                      console.log('user ', user);\r\n                      if(user.status === 200)\r\n                      {        \r\n                        alert(\"Registration successful!\");\r\n                        that.props.updateRoute(\"Login\");\r\n                      }\r\n                      else if (user.status === 400)\r\n                      {\r\n                        alert(\"This user already is registered!\");\r\n                      }\r\n                    })\r\n                    .catch(err => console.log('error entering student \\n', err));\r\n                  }\r\n                  else\r\n                  {\r\n                    alert(\"Error occured during registration. Please try again later.\");\r\n                  }\r\n                }\r\n          })\r\n    }\r\n  }\r\n\r\n\r\n    onSubmitReg1 = () =>\r\n  {\r\n    this.props.updateRoute(\"Login\");\r\n  }\r\n\r\n    onClickSignInButton = () => {\r\n      this.props.updateRoute(\"Login\");\r\n    }\r\n\r\n    render (){\r\n      return (\r\n        <article className=\"br3 w-100 w-50-m w-25-l mw6 shadow-5 center registerbox\">\r\n        <main className=\"pa4 black-80\">\r\n        <div className=\"measure\">\r\n          <fieldset id=\"sign_up\" className=\"ba b--transparent ph0 mh0\">\r\n            <legend className=\"f1 fw6 ph0 mh0 myTColor\">Register</legend>\r\n            <div className=\"mt1\">\r\n              <label className=\"db fw6 lh-copy f4 myTColor\" htmlFor=\"name\">Name</label>\r\n              <input \r\n              className=\"pa2 w-100\" \r\n              type=\"text\" \r\n              name=\"name\"  \r\n              id=\"name\"\r\n              onChange={this.onNameChange}\r\n              />\r\n            </div>\r\n            <div className=\"mt1\">\r\n              <label className=\"db fw6 lh-copy f4 myTColor\" htmlFor=\"email-address\">Email</label>\r\n              <input \r\n              className=\"pa2 w-100\" \r\n              type=\"email\" \r\n              name=\"email-address\"  \r\n              id=\"email-address\"\r\n              onChange={this.onEmailChange}\r\n              />\r\n            </div>\r\n            <div className=\"mv1\">\r\n              <label className=\"db fw6 lh-copy f4 myTColor\" htmlFor=\"password\">Password</label>\r\n              <input \r\n              className=\"pa2 w-100\" \r\n              type=\"password\" \r\n              name=\"password\"  \r\n              id=\"password\"\r\n              onChange={this.onPasswordChange}\r\n              />\r\n            </div>\r\n          </fieldset>\r\n          <div className=\"\">\r\n            <input \r\n            onClick = {this.onSubmitReg2}\r\n            className=\"input b ph3 pv2 input-reset ba b--black hover-bg-green grow pointer f6 dib\" \r\n            type=\"submit\" \r\n            value=\"Register\"/>\r\n            <input \r\n            onClick = {this.onClickSignInButton}\r\n            className=\"input b ph3 pv2 input-reset ba b--black hover-bg-green grow pointer f6 dib\" \r\n            type=\"submit\" \r\n            value=\"Sign In\"/>\r\n          </div>\r\n        </div>\r\n      </main>\r\n      </article>\r\n    );\r\n\r\n  }\r\n\r\n}\r\n\r\nexport default Register;","import React from 'react';\r\nimport './SignIn.css';\r\n\r\nconst axios = require('axios');\r\n\r\n\r\nclass SignIn extends React.Component {\r\n\r\n  constructor(props){\r\n    super(props);\r\n\r\n    this.state = {\r\n      signInEmail: '',\r\n      signInPassword: '',\r\n      apiKey: '',\r\n    }\r\n\r\n  }\r\n\r\n  onEmailChange = (event) => {\r\n    this.setState({signInEmail: event.target.value});\r\n  }\r\n\r\n  onPasswordChange = (event) => {\r\n    this.setState({signInPassword: event.target.value});\r\n  }\r\n\r\n  onSubmitSignIn = () => {\r\n\r\n      fetch('https://gentle-everglades-47985.herokuapp.com/signin',{\r\n      method: 'post',\r\n      headers: {'Content-Type': 'application/json'},\r\n      body: JSON.stringify({\r\n      email: this.state.signInEmail,\r\n      password: this.state.signInPassword\r\n      })\r\n    })\r\n    .then(response => response.json())\r\n    .then(result => {\r\n          if(result.name)\r\n          {            \r\n            this.props.ChangeState('home', result.email, result.name, result.rollno)\r\n          }\r\n          else\r\n          {\r\n            alert(result.message);\r\n          }\r\n    })\r\n    .catch(err => alert(err.message))\r\n\r\n  }\r\n\r\n  updateEmailAndApiKey = () =>\r\n  {\r\n    // console.log('email: ', this.state.signInEmail);\r\n    this.props.setEmailAndApiKey(this.state.signInEmail, this.state.apiKey);\r\n  }\r\n\r\n   validateLogIn = (route) => {\r\n    let that = this;\r\n    fetch('http://localhost:3001/signin',{\r\n      method: 'post',\r\n      headers: {'Content-Type': 'application/json'},\r\n      body: JSON.stringify({\r\n      email: this.state.signInEmail,\r\n      password: this.state.signInPassword,\r\n      })\r\n    })\r\n    .then(response => {\r\n        console.log(response);\r\n        if(response.status == 200)\r\n        {          \r\n           fetch('http://localhost:3001/getApiKey',{\r\n                method: 'post',\r\n                headers: {'Content-Type': 'application/json'},\r\n                body: JSON.stringify({\r\n                email: this.state.signInEmail,\r\n                })\r\n              })\r\n              .then(response => response.json()) \r\n              .then(data =>\r\n            {\r\n              // console.log('resp ', data);\r\n              that.setState({signInEmail: data.email});\r\n              that.setState({apiKey: data.apikey});\r\n              that.updateEmailAndApiKey();\r\n              if(this.state.apiKey)\r\n              {\r\n                this.props.updateRoute(route);\r\n              }\r\n            })\r\n            .catch(function (error) {\r\n              console.log('errorrr ', error);\r\n            });\r\n        }\r\n        else\r\n        {\r\n          if(response.status == 400)\r\n          {\r\n            alert(\"No data found. Please check your login credentials.\");\r\n          }\r\n          else\r\n          {\r\n            alert(\"We are experiencing difficulties logging in. Please try later.\");\r\n          }\r\n        }\r\n      })\r\n    .catch(err => {console.log(err)});\r\n}\r\n\r\n onSubmitSignIn1 = (route) =>\r\n  {\r\n    this.validateLogIn(route);\r\n  }\r\n\r\n  render(){\r\n    return (\r\n      <article className=\"br3 w-100 w-50-m w-25-l mw6 shadow-5 center signinbox\">\r\n      <main className=\"pa4 black-80\">\r\n        <div className=\"measure\">\r\n          <fieldset id=\"sign_up\" className=\"ba b--transparent ph0 mh0\">\r\n            <legend className=\"signIn\">Sign In</legend>\r\n            <div className=\"mt3\">\r\n              <label className=\"db fw6 lh-copy f4 myTColor\" htmlFor=\"email-address\">Email</label>\r\n              <input \r\n              className=\"pa2 w-100\" \r\n              type=\"email\" \r\n              name=\"email-address\"  \r\n              id=\"email-address\"\r\n              onChange = {this.onEmailChange}\r\n              />\r\n            </div>\r\n            <div className=\"mv3\">\r\n              <label className=\"db fw6 lh-copy f4 myTColor\" htmlFor=\"password\">Password</label>\r\n              <input \r\n              className=\"pa2 w-100\" \r\n              type=\"password\" \r\n              name=\"password\"  \r\n              id=\"password\"\r\n              onChange = {this.onPasswordChange}\r\n\r\n              />\r\n            </div>\r\n          <div>\r\n            <input \r\n            onClick = {() => this.onSubmitSignIn1(\"App\")}\r\n            className=\"input b ph3 pv2 input-reset ba b--black hover-bg-green grow pointer f6 dib\" \r\n            type=\"submit\" \r\n            value=\"Sign in\"/>\r\n          </div>\r\n          <br />\r\n          <div>\r\n            <input \r\n            onClick = {() => this.onSubmitSignIn1(\"Register\")}\r\n            className=\"input b ph3 pv2 input-reset ba b--black hover-bg-green grow pointer f6 dib\" \r\n            type=\"submit\" \r\n            value=\"Register User\"/>\r\n          </div>\r\n          </fieldset>\r\n        </div>\r\n      </main>\r\n      </article>\r\n\r\n  \t );\r\n  }\r\n}\r\nexport default SignIn;","import React, {Component} from 'react';\r\n\r\nclass PlayerData extends Component {\r\n\r\n    constructor(props){\r\n\r\n        super(props);\r\n        this.state = {\r\n            Data: <h3>Press \"Request Data\" to check for available players.</h3>,\r\n            email: this.props.data.email,\r\n            apikey: this.props.data.apikey,\r\n            playersLeft: 0,\r\n            instance: 0,\r\n            tradeID: [],\r\n            assignedActive: [],\r\n            ph: \"\"\r\n        };\r\n    }\r\n\r\n    onBuyClick = (event, index) =>\r\n    {\r\n        let myData = {...this.state.Data};\r\n        console.log(\"MyData is: \", myData);\r\n        let myData1 = [];\r\n        let boughtID = 0;\r\n        var currAssigned = [...this.state.assignedActive];\r\n        var leftAssigned = [];\r\n        // console.log('Assgined players are: ', currAssigned);\r\n        myData.props.children.forEach((player, myindex) =>\r\n            {\r\n               if(player.key == index)\r\n                {\r\n\r\n                    console.log(\"Player: \", player);\r\n                    // console.log(\"Bought player is: \", player.props.tradeID);\r\n                    boughtID = player.props.tradeID;\r\n                    //    myData.props.children.splice(myindex,1)\r\n                    // myData1.push(player);\r\n                    var ptag = document.createElement(\"p\");\r\n                    var text = document.createTextNode(\"Bought Status: Checking!\");\r\n                    ptag.appendChild(text);\r\n                    document.getElementById(player.key).appendChild(ptag);\r\n                    currAssigned.forEach((element, thisindex) => {\r\n                        // console.log(\"Element: \", element);\r\n                        if(element == player.props.tradeID)\r\n                        {\r\n                        }\r\n                        else\r\n                        {\r\n                          leftAssigned.push(element);\r\n                        }\r\n                    });\r\n                }\r\n                else\r\n                {\r\n                    myData1.push(player);\r\n                }\r\n        });\r\n            // console.log(\"MyData1 is : \", myData1.length);\r\n            // console.log(\"current assigned is : \", leftAssigned);\r\n            // console.log(\"Bought ID: \", boughtID);\r\n            // this.setState({Data: myData, playersLeft: myData.props.children.length});\r\n                this.setState({Data: myData, playersLeft: leftAssigned.length, assignedActive: leftAssigned});\r\n    }\r\n\r\n    onChange = (event) =>\r\n    {\r\n        if(event.target.value > 0)\r\n        {\r\n            this.setState({\r\n                instance: event.target.value\r\n            });\r\n        }\r\n        else\r\n        {\r\n            this.setState({\r\n                instance: 0\r\n            });\r\n        }\r\n    }\r\n\r\n    async storePlayers(data)\r\n    {\r\n        let that = this;\r\n        const buttonStyle =\r\n        {\r\n            backgroundColor: \"green\",\r\n            color: \"yellow\",\r\n            width: \"60%\",\r\n            height: \"auto\",\r\n            padding: \"10px\",\r\n            fontSize: \"20px\"\r\n        };\r\n\r\n        const cardStyle =\r\n        {\r\n            backgroundColor: \"black\",\r\n            color: \"orange\",\r\n            border: \"2px solid green\",\r\n            padding: \"20px\",            \r\n            marginLeft: '30px', \r\n            marginTop: '20px'\r\n        };\r\n\r\n        if(data.data)\r\n        {\r\n            // console.log('Data :', data.data);\r\n                let displayToUser = data.data.map((player, index) => {\r\n\r\n                return (    \r\n                    <div id = {index} tradeID = {player.tradeId} key = {index} style={cardStyle}>\r\n                        <h2>Name: {player.player_name}</h2>\r\n                        <h3>Rating: {player.player_rating}</h3>\r\n                        <h3>Position: {player.position}</h3>\r\n                        <h3>Starting bid: {player.startingBid}</h3>\r\n                        <h3>Buy Now Price: {player.buyNowPrice}</h3>\r\n                        <h3>Time Remaining:</h3>\r\n                        <h3>{data.days} day(s), {data.hours} hours, {data.minutes} minutes.</h3>\r\n                        <button style={buttonStyle} onClick = {(event) => this.onBuyClick(event,index)}>Bought</button>\r\n                        <br />\r\n                    </div> \r\n                    );\r\n                }\r\n                );\r\n\r\n                const assignedPlayers = data.data.map(player =>\r\n                    {\r\n                        return player.tradeId;\r\n                    });\r\n\r\n                    that.setState(\r\n                    {\r\n                        Data: \r\n                            <div style={{display:'flex', justifyContent: 'center'}}>\r\n                            {displayToUser}\r\n                            </div>,\r\n                            playersLeft: displayToUser.length,\r\n                            assignedActive: assignedPlayers\r\n                    }\r\n                );\r\n        }\r\n        else\r\n        {\r\n//            console.log(data);\r\n            this.setState({\r\n                Data: <div>\r\n                        <br />\r\n                        <h2>Server response: {data.message}</h2>\r\n                      </div>\r\n            })\r\n        }\r\n        this.setState({ph: \"\"});\r\n    }\r\n\r\n    onKeyDown = (event) =>\r\n    {\r\n        if(event.key == \"Enter\")\r\n        {\r\n            this.onSubmit();\r\n        }\r\n    }\r\n\r\n    onSubmit = () =>\r\n    {\r\n        if(this.state.playersLeft == 0)\r\n        {\r\n\r\n            fetch('http://localhost:3001/getData',{\r\n                method: 'post',\r\n                headers: {'Content-Type': 'application/json'},\r\n                body: JSON.stringify({\r\n                email: this.state.email,\r\n                apikey: this.state.apikey,\r\n                instance: this.state.instance\r\n                })\r\n            })\r\n            .then(response => response.json())             \r\n            .then(data => {\r\n                this.storePlayers(data);\r\n            })\r\n            .catch(function (error) {\r\n                console.log(error);\r\n            });\r\n        }        \r\n        else\r\n        {\r\n            const tempData = this.state.Data;\r\n            const players = this.state.playersLeft;\r\n            alert(`Please buy the remaining ${players} player(s) before requesting new players.`);\r\n\r\n//            this.setState({Data: <h2>Getting data..</h2>, playersLeft: 0});\r\n            this.setState({Data: tempData, playersLeft: players});\r\n        }\r\n    }\r\n\r\n    render()\r\n    {\r\n        // console.log('Data : ', this.state.Data);   \r\n        return(\r\n            <div tabIndex = {1} key = {this.state.playersLeft} onKeyDown = {this.onKeyDown}>\r\n                <div style={{display:'flex', justifyContent: 'center'}}>\r\n                <button type='submit' onClick={this.onSubmit}><h3>Request Data</h3></button>\r\n                </div>\r\n                <h4>Max no of players at once.</h4>\r\n                <input style={{marginLeft: '10px'}}\r\n                        placeholder={`Current Max Players: ${this.state.instance}`} \r\n                        value = {\"\"}\r\n                        onChange={this.onChange} />\r\n                {this.state.Data}  \r\n            </div> \r\n        );\r\n    }\r\n}\r\n\r\nexport default PlayerData;","import React, {Component} from 'react';\r\n\r\n// var TableComponent = React.createClass({\r\n\r\n  // Example Data\r\n  var tableData = {\r\n    columns: ['Service', 'Cost/Unit', 'Unit', 'Units Requested'],\r\n    rows: [{\r\n      'Service': 'Veterinary Assitance',\r\n      'Cost/Unit': 50,\r\n      'Unit': '1 Hour',\r\n      'Units Requested': 12\r\n    }, {\r\n      'Service': 'Veterinary Assitance',\r\n      'Cost/Unit': 50,\r\n      'Unit': '1 Hour',\r\n      'Units Requested': 12\r\n    }, {\r\n      'Service': 'Veterinary Assitance',\r\n      'Cost/Unit': 50,\r\n      'Unit': '1 Hour',\r\n      'Units Requested': 12\r\n    }, {\r\n      'Service': 'Veterinary Assitance',\r\n      'Cost/Unit': 50,\r\n      'Unit': '1 Hour',\r\n      'Units Requested': 12\r\n    }, {\r\n      'Service': 'Veterinary Assitance',\r\n      'Cost/Unit': 50,\r\n      'Unit': '1 Hour',\r\n      'Units Requested': 12\r\n    }, {\r\n      'Service': 'Veterinary Assitance',\r\n      'Cost/Unit': 50,\r\n      'Unit': '1 Hour',\r\n      'Units Requested': 12\r\n    }, {\r\n      'Service': 'Veterinary Assitance',\r\n      'Cost/Unit': 50,\r\n      'Unit': '1 Hour',\r\n      'Units Requested': 12\r\n    }, {\r\n      'Service': 'Veterinary Assitance',\r\n      'Cost/Unit': 50,\r\n      'Unit': '1 Hour',\r\n      'Units Requested': 12\r\n    }, {\r\n      'Service': 'Veterinary Assitance',\r\n      'Cost/Unit': 50,\r\n      'Unit': '1 Hour',\r\n      'Units Requested': 12\r\n    }, {\r\n      'Service': 'foo',\r\n      'Unit': null,\r\n      'Cost/Unit': undefined,\r\n      'Units Requested': 42\r\n    }]\r\n  };\r\n\r\n\r\nclass TableClass extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            data: {columns: [], rows: []},\r\n            totalEarning: 0,\r\n            conditions: {\r\n              cardId: \"\",\r\n              assigned_to: \"\",\r\n              auction_status: \"\",\r\n              received_time: \"\",\r\n            },\r\n        };\r\n    }\r\n    \r\n    setDataValues = () =>\r\n    {\r\n        let myConditions = {...this.state.conditions};\r\n    \r\n        fetch('http://localhost:3001/getAuctionData',{\r\n            method: 'post',\r\n            headers: {'Content-Type': 'application/json'},\r\n            body: JSON.stringify({\r\n            email: this.props.data.email,\r\n            apikey: this.props.data.apikey,\r\n            conditions: this.state.conditions\r\n            })\r\n        })\r\n        .then(response => response.json())             \r\n        .then(data => {\r\n            console.log(\"Data is: \", data);\r\n            \r\n            let values = [];\r\n            var totalEarned = 0;\r\n            if(Object.values(data))\r\n            {\r\n              values = data;\r\n              values.map(entry => {\r\n                totalEarned = totalEarned + entry.earned;\r\n              })\r\n            }\r\n\r\n            console.log(\"Total earned is: \", totalEarned);\r\n            console.log(\"values are: \", values);\r\n                this.setState({\r\n                    data: {\r\n//                        columns: columns,\r\n                        rows: values\r\n                    },\r\n                  totalEarning: totalEarned\r\n                });\r\n        })\r\n        .catch(function (error) {\r\n            console.log(error);\r\n        });    \r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setDataValues();\r\n    }\r\n\r\n    onChange = (event) => {\r\n        console.log(\"Triggered: \",event.target);\r\n        let value = event.target.value;\r\n        let tempCondition = {...this.state.conditions};\r\n        if(event.target.id == \"assign\")\r\n        {\r\n          tempCondition.assigned_to = value;\r\n        }\r\n        if(event.target.id == \"status\")\r\n        {\r\n          tempCondition.auction_status = value;\r\n        }\r\n        if(event.target.id == \"date\")\r\n        {\r\n          tempCondition.received_time = value;\r\n        }\r\n        if(event.target.id == \"cardid\")\r\n        {\r\n          tempCondition.cardId = value;\r\n        }\r\n        this.setState({\r\n          conditions: tempCondition\r\n        }, () => this.setDataValues()\r\n        );\r\n    }\r\n\r\n    onClickGoBack = () => {\r\n          this.props.updateRoute(\"App\");\r\n    }\r\n\r\n\r\n    render() {\r\n        console.log(this.state.data);\r\n\r\n        let tempConditions = {\r\n          cardId: \"\",\r\n          assigned_to: \"\",\r\n          auction_status: \"\",\r\n          received_time: \"\",\r\n        };\r\n\r\n        if(this.state.conditions.cardId)\r\n        {\r\n            tempConditions.cardId = this.state.conditions.cardId;\r\n        }\r\n        if(this.state.conditions.assigned_to)\r\n        {\r\n            tempConditions.assigned_to = this.state.conditions.assigned_to;\r\n        }\r\n        if(this.state.conditions.auction_status)\r\n        {\r\n            tempConditions.auction_status = this.state.conditions.auction_status;\r\n        }\r\n        if(this.state.conditions.received_time)\r\n        {\r\n            tempConditions.received_time = this.state.conditions.received_time;\r\n        }\r\n\r\n        // Data\r\n\r\n        // var dataColumns = tableData.columns;\r\n        // var dataRows = tableData.rows;\r\n\r\n        var dataColumns = [\"cardId\", \"tradeId\", \"player_details\", \"earned\", \"assigned_to\", \"auction_status\", \"received_time\"];\r\n\r\n        var dataRows = [];\r\n\r\n        // var dat\r\n\r\n      if(this.state.data.rows)\r\n      {\r\n//          dataColumns = this.state.data.columns;\r\n          dataRows = this.state.data.rows;\r\n      }\r\n      else\r\n      {\r\n//        dataColumns = [\"Card ID\", \"Trade ID\", \"Player Details\", \"Earned\", \"Assigned To\", \"Auction Status\", \"Received Time\"];\r\n      }\r\n    //   console.log\r\n      var tableHeaders = (<thead>\r\n            <tr>\r\n              {dataColumns.map(function(column) {\r\n                return <th>{column}</th>; })}\r\n            </tr>\r\n        </thead>);\r\n  \r\n      var tableBody = dataRows.map(function(row) {\r\n        return (\r\n          <tr>\r\n            {dataColumns.map(function(column) {\r\n              return <td>{row[column]}</td>; })}\r\n          </tr>); });\r\n       \r\n      // Decorate with Bootstrap CSS\r\n      return (\r\n        <div style = {{height: \"700px\", overflow:\"scroll\", color: \"white\"}}>\r\n\r\n            <div style={{display: \"flex\", width: \"100%\"}}>\r\n\r\n                    <div style={{width: \"20%\"}}>\r\n                        <div style={{marginTop: \"5%\", marginLeft: \"5%\"}}>\r\n                          <h2 style={{color: \"gold\"}}>Total Earned is: </h2>\r\n                          <h2 style={{color: \"chartreuse\"}}>{Math.floor(this.state.totalEarning)}</h2>\r\n                        </div>\r\n                        <div>                          \r\n                          <button \r\n                          style = {{backgroundColor: \"black\", color:\"red\", borderColor: \"gold\", \r\n                                width: \"auto\", height: \"auto\", padding: \"8px\", margin: \"30px 50px\"}}                        \r\n                          onClick={this.onClickGoBack}>Go Back</button>\r\n                        </div>\r\n                    </div>\r\n\r\n\r\n                    <div style={{display:\"flex\", width: \"80%\", marginLeft: \"5%\"}}>\r\n                      <div style={{ width: \"40%\", }}>\r\n                      <h4>Card ID: </h4>\r\n                      <input id=\"cardid\" style={{marginLeft: '10px', borderColor: \"gold\", borderWidth: \"3px\",\r\n                                      backgroundColor: \"#3A4245\", color: \"gold\", textAlign: \"center\",\r\n                                    width: \"200px\", height: \"30px\"\r\n                              }}\r\n                          placeholder= \"\" \r\n                          value = {`${tempConditions.cardId}`}\r\n                          onChange={this.onChange} ></input>\r\n                      <h4>Assigned To: </h4>\r\n                      <input id=\"assign\" style={{marginLeft: '10px', borderColor: \"gold\", borderWidth: \"3px\",\r\n                                      backgroundColor: \"#3A4245\", color: \"gold\", textAlign: \"center\",\r\n                                    width: \"200px\", height: \"30px\"\r\n                              }}\r\n                          placeholder= \"\" \r\n                          value = {`${tempConditions.assigned_to}`}\r\n                          onChange={this.onChange} ></input>\r\n\r\n                      </div>                    \r\n                      <div style={{ width: \"40%\", }}>\r\n                      <h4>Auction Status: </h4>\r\n                      <input id=\"status\" style={{marginLeft: '10px', borderColor: \"gold\", borderWidth: \"3px\",\r\n                                      backgroundColor: \"#3A4245\", color: \"gold\", textAlign: \"center\",\r\n                                    width: \"200px\", height: \"30px\"\r\n                              }}\r\n                          placeholder= \"\" \r\n                          value = {`${tempConditions.auction_status}`}\r\n                          onChange={this.onChange} ></input>\r\n                      <h4>Received Time: </h4>\r\n                      <input id=\"date\" style={{marginLeft: '10px', borderColor: \"gold\", borderWidth: \"3px\",\r\n                                      backgroundColor: \"#3A4245\", color: \"gold\", textAlign: \"center\",\r\n                                    width: \"200px\", height: \"30px\"\r\n                              }}\r\n                          placeholder= \"\" \r\n                          value = {`${tempConditions.received_time}`}\r\n                          onChange={this.onChange} ></input>\r\n                      </div>\r\n                    </div>\r\n            </div>\r\n              <br />\r\n              <hr style={{borderBottom:\"1px dashed black\"}}/>\r\n              <br />\r\n            <table className=\"table table-bordered table-hover\" width=\"100%\">\r\n                {tableHeaders}\r\n                {tableBody}\r\n            </table>\r\n        </div>\r\n      ) \r\n    }\r\n}\r\n          \r\n\r\nexport default TableClass;\r\n","import React, { Component } from 'react';\r\nimport Modal from 'react-awesome-modal';\r\nimport Sound from 'react-sound';\r\nimport Notifications, {notify} from 'react-notify-toast';\r\nimport ReactLoading from 'react-loading';\r\n\r\n\r\nclass PlayerHandler extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            displayData: <h3></h3>,\r\n            buttonText: \"Request Players.\",\r\n            searching: false,\r\n            noPlayerDisplay: <h3>Press \"Request Data\" to check for available players.</h3>,\r\n            playerData: [],\r\n            email: this.props.data.email,\r\n            apikey: this.props.data.apikey,\r\n            isAdmin: this.props.data.email == 'admin@themarket.org' ? true : false,\r\n\r\n            billingRate: \"Fetching Billing Rate. Please refresh if it doesn't update in 10 seconds.\",\r\n            playersLeft: 0,\r\n            instance: \"\",\r\n            maxPlayers: 2,\r\n            visible: false,\r\n            cardid: 0,\r\n            playSoundStatus: \"STOPPED\"\r\n        }        \r\n    }\r\n\r\n    openModal = (cancelid) => {\r\n        this.setState({\r\n            cardid: cancelid,\r\n            visible : true\r\n        });\r\n    }\r\n\r\n    clickModalOK = () =>\r\n    {           \r\n        fetch('http://localhost:3001/cancelAuction',{\r\n            method: 'post',\r\n            headers: {'Content-Type': 'application/json'},\r\n            body: JSON.stringify({\r\n            cancelId: this.state.cardid,\r\n            })\r\n        })\r\n        .then(response => response.json())             \r\n        .then(data => {\r\n//            console.log(\"Cancel request returned: \", data.msg);\r\n            if(data.ret == 0)\r\n            {\r\n                notify.show((\"The purchase was successfully cancelled.\"), \"error\", 6000);\r\n            }\r\n            else\r\n            {\r\n                notify.show(`The purchase cannot be cancelled. Reason: ${data.msg}`, \"warning\", 6000);\r\n                // this.setState({noPlayerDisplay: <h3>{`${data.message} \\t`}</h3>})\r\n            }\r\n\r\n            let currPlayers = [...this.state.playerData];\r\n\r\n            currPlayers.forEach((element,index) =>\r\n            {\r\n                let tempID = this.state.cardid;\r\n                if(element.cardID == tempID)\r\n                {\r\n                    currPlayers.splice(index, 1);\r\n                }\r\n            });\r\n\r\n            this.setState(\r\n                {cardid: 0, playerData: currPlayers, visible: false},\r\n                () => this.displayPlayerData(currPlayers)                \r\n                );\r\n        })\r\n        .catch(function (error) {\r\n            console.log(error);\r\n            this.setState({cardid: 0, visible: false});\r\n        });\r\n    }\r\n\r\n    closeModal = () => {\r\n        this.setState({\r\n            cardid: 0,\r\n            visible : false\r\n        });\r\n    }\r\n\r\n    timeHandler(timeRem)\r\n    {\r\n        let Date1 = Math.floor( new Date().getTime()/1000 );\r\n        let Date2 = timeRem;\r\n            \r\n        var secdiff = Date2 - Date1; \r\n        var mindiff = Math.floor( secdiff / 60 );\r\n        secdiff = secdiff % 60;\r\n        var hourdiff = Math.floor( mindiff / 60 );\r\n        mindiff = mindiff % 60;\r\n        var daydiff = Math.floor( hourdiff / 24 );\r\n        hourdiff = hourdiff % 24;\r\n        \r\n        const diff = {\r\n            days: daydiff,\r\n            hours: hourdiff,\r\n            minutes: mindiff\r\n        };\r\n    \r\n        return diff;\r\n    }\r\n\r\n    storePlayerData = (data) => \r\n    {\r\n        let prevData = this.state.playerData;\r\n        console.log(\"Data is: \", data.data);\r\n        let tempData = data.data.map(element => {\r\n            const { player_name, player_rating, position, startingBid, buyNowPrice, tradeState, cardId, expires, tradeId} = element;\r\n            let remTime = this.timeHandler(expires);\r\n            console.log(\"Rem time is: \", remTime);\r\n            //            let randomID = Math.floor(Math.random() * 16739589301);\r\n            return {\r\n                name: player_name,\r\n                position: position,\r\n                rating: player_rating,\r\n                startingBid: startingBid,\r\n                buyNowPrice: buyNowPrice,\r\n                cardID: cardId,\r\n                tradeID: tradeId,\r\n                status: tradeState,\r\n                time: {days: remTime.days,hours: remTime.hours, minutes: remTime.minutes}\r\n            };\r\n        });\r\n        let newData = [...prevData, ...tempData];\r\n        let notBought = 0;\r\n        newData.forEach(element =>\r\n            {\r\n                if(element.status == \"active\")\r\n                {\r\n                    notBought++;\r\n                }\r\n                else\r\n                {\r\n\r\n                }\r\n        })\r\n        this.setState({playerData: newData, playersLeft: notBought},() => {\r\n            this.displayPlayerData(newData);\r\n        });\r\n    }\r\n\r\n    displayPlayerData = (myData) =>\r\n    {\r\n        // console.log(\"New data is: \", data);\r\n        let that = this;\r\n        const buttonStyle =\r\n        {\r\n            backgroundColor: \"green\",\r\n            color: \"yellow\",\r\n            width: \"100px\",\r\n            margin: \"10px 10px\",\r\n            height: \"auto\",\r\n            padding: \"10px\",\r\n            fontSize: \"20px\"\r\n        };\r\n\r\n        const cancelButtonStyle =\r\n        {\r\n            backgroundColor: \"red\",\r\n            color: \"white\",\r\n            width: \"100px\",\r\n            margin: \"10px 10px\",\r\n            height: \"auto\",\r\n            padding: \"10px\",\r\n            fontSize: \"20px\"\r\n        };\r\n\r\n        const cardStyle =\r\n        {\r\n            backgroundColor: \"#3A4245\",\r\n            color: \"chartreuse\",\r\n            border: \"2px solid gold\",\r\n            width: \"250px\",\r\n            margin: \"10px 10px\"\r\n        };\r\n\r\n        let toBeDisplayed = myData.map((player,index) =>\r\n            {\r\n                return (\r\n                    <div id = {index} cardID = {player.cardID} tradeID = {player.tradeID} key = {index} style={cardStyle}>\r\n                        <h2>Name: {player.name}</h2>\r\n                        <h3>Rating: {player.rating}</h3>\r\n                        <h3>Position: {player.position}</h3>\r\n                        <h3>Starting bid: {player.startingBid}</h3>\r\n                        <h3>Buy Now Price: {player.buyNowPrice}</h3>\r\n                        <h3>Time Remaining:</h3>\r\n                        <h3>{player.time.days} day(s), {player.time.hours} hours, {player.time.minutes} minutes.</h3>\r\n                        <h3>Auction Status: {player.status}</h3>\r\n                        <div>\r\n                        <button style={buttonStyle} onClick = {(event) => this.onBuyClick(event,player.cardID)}>Bought</button>\r\n                        <br />\r\n                        <button style={cancelButtonStyle} onClick = {(event) => this.onCancelClick(event,player.cardID)}>Cancel</button>\r\n                        <br />\r\n                        </div>\r\n                    </div> \r\n                );\r\n        })\r\n        \r\n        // console.log(\"To be displayed: \", toBeDisplayed);\r\n        this.setState({noPlayerDisplay: <h2>Updating....</h2>});\r\n\r\n        this.setState({\r\n            displayData: \r\n            <div style={{display:'inline-flex', justifyContent: 'center'}}>\r\n            {toBeDisplayed}\r\n            </div>,\r\n            noPlayerDisplay:\r\n            <h3></h3>\r\n        });\r\n    }\r\n\r\n    onCancelClick = (event, tradeid) =>\r\n    {\r\n        console.log(\"Cancel requested for :\", tradeid);\r\n//        <input type=\"button\" value=\"Open\" onClick={() => this.openModal()} />\r\n        this.openModal(tradeid);\r\n    }\r\n\r\n    onBuyClick = (event,tradeid) => {\r\n        console.log(\"Purchase requested for: \", tradeid);\r\n        let notBought = this.state.playersLeft;\r\n\r\n        let currPlayers = [...this.state.playerData];\r\n\r\n        currPlayers.forEach((element, index) => {\r\n            if(element.cardID == tradeid)\r\n            {\r\n                currPlayers[index].status=\"pending server response\";\r\n                this.checkBoughtStatus(tradeid, currPlayers, index, notBought);\r\n            }\r\n        })\r\n    }    \r\n\r\n    checkBoughtStatus = (playerID, currPlayers, index, notBought) =>\r\n    {\r\n        console.log(\"Checking purchase status for: \", playerID);\r\n\r\n        fetch('http://localhost:3001/checkAuctionStatus',{\r\n            method: 'post',\r\n            headers: {'Content-Type': 'application/json'},\r\n            body: JSON.stringify({\r\n            tradeID: playerID\r\n            })\r\n        })\r\n        .then(response => response.json())             \r\n        .then(data => {\r\n            if(data.data)\r\n            {\r\n                if(data.data.tradeState)\r\n                {\r\n                    if(data.data.tradeState == 'closed')\r\n                    {\r\n                        notify.show((\"CONGRATULATIONS! \" + `${currPlayers[index].name}` + \" has been bought!.\"),(\"success\"), (5000));\r\n                        currPlayers[index].status = \"Bought!\";\r\n                        currPlayers.splice(index,1);\r\n                        // console.log(\"State Data: \", this.state.Data);\r\n                        console.log(\"Curr Players: \", currPlayers);\r\n                        if(notBought > 0)\r\n                        {\r\n                            notBought--;\r\n                            console.log(\"Players to be bought: \", notBought);\r\n                        }\r\n                        this.setState({playerData: currPlayers, playersLeft: notBought}, () => this.displayPlayerData(currPlayers));\r\n                    }\r\n                    else if(data.data.tradeState == 'expired')\r\n                    {\r\n                        // console.log(`You took too long buyg`);\r\n                        notify.show((\"Unfortunately, listing for \" + `${currPlayers[index].name}` + \" has EXPIRED and was not bought.\"),(\"error\"),(8000));\r\n                        currPlayers[index].status = \"This player has expired.\";\r\n                        // currPlayers.splice(index,1);\r\n                        // console.log(\"State Data: \", this.state.Data);\r\n                        console.log(\"Curr Players: \", currPlayers);\r\n                        // if(notBought > 0)\r\n                        // {\r\n                        //     notBought--;\r\n                        //     console.log(\"Players to be bought: \", notBought);\r\n                        // }\r\n                        this.setState({playerData: currPlayers, playersLeft: notBought}, () => this.displayPlayerData(currPlayers));\r\n                    }\r\n                    else if(data.data.tradeState == 'active')\r\n                    {\r\n                        // console.log(`You took too long buyg`);\r\n                        notify.show((`${currPlayers[index].name}` + \" has not been bought yet!.\"),(\"warning\"), (8000));\r\n                        currPlayers[index].status = \"NOT Bought yet.\";\r\n                        // currPlayers.splice(index,1);\r\n                        // console.log(\"State Data: \", this.state.Data);\r\n                        console.log(\"Curr Players: \", currPlayers);\r\n                        // if(notBought > 0)\r\n                        // {\r\n                        //     notBought--;\r\n                        //     console.log(\"Players to be bought: \", notBought);\r\n                        // }\r\n                        this.setState({playerData: currPlayers, playersLeft: notBought}, () => this.displayPlayerData(currPlayers));\r\n                    }\r\n                }\r\n            }\r\n            else\r\n            {                \r\n                console.log(`Trade ID ${playerID}` + \" has not been bought.\");\r\n                notify.show((\"An error occured while checking status.\\nPlease retry after 2 minutes.\"), (\"warning\"), (7500));\r\n                currPlayers[index].status = \"Please re-click me after 2 minutes\";\r\n                this.setState({playerData: currPlayers, playersLeft: notBought}, () => this.displayPlayerData(currPlayers));\r\n                console.log(\"Server response for status check: \", data);\r\n            }\r\n    })\r\n        .catch(function (error) {\r\n            console.log(\"Server error for status check: \", error);\r\n            notify.show((\"An error occured while checking status.\\nPlease retry after 2 minutes.\"), (\"warning\"), (7500));\r\n            currPlayers[index].status = \"Please re-click me after 2 minutes\";\r\n            this.setState({playerData: currPlayers, playersLeft: notBought}, () => this.displayPlayerData(currPlayers));\r\n    });\r\n\r\n    }\r\n\r\n    onChange = (event) =>\r\n    {\r\n        if(event.target.value > 0)\r\n        {\r\n            if(event.target.value > 4)\r\n                this.setState({\r\n                    instance: 4,\r\n                    maxPlayers: 4\r\n                });\r\n            else\r\n            {\r\n                this.setState({\r\n                    instance: event.target.value,\r\n                    maxPlayers: event.target.value\r\n                });\r\n            }\r\n        }\r\n        else\r\n        {\r\n            this.setState({\r\n                instance: \"\",\r\n                maxPlayers: 2\r\n        });\r\n        }\r\n    }\r\n\r\n    onKeyDown = (event) =>\r\n    {\r\n        if(event.key == \"Enter\")\r\n        {\r\n            this.onSubmit();\r\n        }\r\n        else if(event.key == \"Shift\")\r\n        {\r\n            this.setState({playSoundStatus: \"STOPPED\"});\r\n        }\r\n    }\r\n\r\n    getDataFromServer = () =>\r\n    {\r\n        let max = this.state.maxPlayers;\r\n        if(this.state.playersLeft < max)\r\n        {\r\n            if(this.state.searching)\r\n            {\r\n//                let myEmail = this.state.isAdmin ? \"waqar@gmail.com\" : this.state.email;\r\n                setTimeout(() => {\r\n                    fetch('http://localhost:3001/getData',{\r\n                        method: 'post',\r\n                        headers: {'Content-Type': 'application/json'},\r\n                        body: JSON.stringify({\r\n                        email: this.state.email,\r\n                        apikey: this.state.apikey,\r\n                        instance: this.state.instance\r\n                        })\r\n                    })\r\n                    .then(response => response.json())             \r\n                    .then(data => {\r\n                        if(data.data)\r\n                        {\r\n                            if(this.state.playersLeft < max)\r\n                            {\r\n                                this.setState({playSoundStatus: \"PLAYING\"});\r\n                                this.storePlayerData(data);\r\n                                this.getDataFromServer();\r\n                            }\r\n                            else\r\n                            {                                \r\n                                this.setState({playSoundStatus: \"PLAYING\", buttonText: \"Request Players.\", searching: false});\r\n                                this.storePlayerData(data);\r\n                            }\r\n                        }\r\n                        else\r\n                        {\r\n                            console.log(\"Response: \", data.message);\r\n                            this.getDataFromServer();\r\n                            //                    this.setState({noPlayerDisplay: <h3>{`${data.message} \\t`}</h3>})\r\n                        }\r\n                    })\r\n                    .catch(function (error) {\r\n                        console.log(error);\r\n                    });    \r\n                }, 400);\r\n            }\r\n        }        \r\n        else\r\n        {\r\n//            const players = this.state.playersLeft;\r\n//            alert(`Please buy the remaining ${players} player(s) before requesting new players.`);\r\n              this.setState({playSoundStatus: \"PLAYING\", buttonText: \"Request Players.\", searching: false});\r\n//              this.storePlayerData(data);\r\n        }\r\n    }\r\n    \r\n    onSubmit = () =>\r\n    {\r\n        if(this.state.buttonText == \"Stop Requesting Players.\")\r\n        {\r\n            this.setState({\r\n                buttonText: \"Request Players.\", \r\n                noPlayerDisplay: <h3>Press \"Request Players\" to search for players....</h3>, \r\n                searching: false\r\n            });\r\n        }\r\n        else{\r\n            this.setState({\r\n            buttonText: \"Stop Requesting Players.\", \r\n            noPlayerDisplay: <h3>Searching for players....</h3>, \r\n            searching: true},\r\n            () => this.getDataFromServer()\r\n            );\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        \r\n        fetch('http://localhost:3001/pricefetch')\r\n        .then(response => response.json())\r\n        .then(data => {\r\n//            console.log(\"Data for todays rate is: \", data);\r\n            if(data.billingRate)\r\n            {\r\n                const billRate = data.billingRate;\r\n//                const billRate = 0.080;\r\n                let newRate = billRate - 0.003;\r\n                newRate = Math.floor(newRate * 100 * 158 * 0.52);\r\n                this.setState({billingRate: `PKR ${newRate} / 100K`});\r\n                //per 1000 coins = 0.052 euro;\r\n                //per 100,000 = 5.2 euro;\r\n                //5.2 euro in pkr = 820.0 rs\r\n                //give client 425.0 rs.\r\n                // we get 395 rs per 100k.\r\n\r\n\r\n                // STEPS FOR CALCULATION\r\n                // newRate = rate - 0.003;\r\n                // newRate = newRate * 100; (per 100K)\r\n                // newRate = newRate * 158; (per 100K in PKR).\r\n                // showToClient = newRate * 0.52; (per 100K in PKR - our profit)\r\n                // display = \"Today's rate is {showToClient} per 100K\";\r\n\r\n\r\n            }\r\n        })\r\n        .catch(err => console.log(\"Error while fetching rate from server.\"));\r\n    }\r\n    \r\n    onClickSignOut = () => {\r\n\r\n        let email = this.state.email;\r\n\r\n        fetch('http://localhost:3001/signout',{\r\n            method: 'post',\r\n            headers: {'Content-Type': 'application/json'},\r\n            body: JSON.stringify({\r\n            email: email\r\n            })\r\n        })\r\n        .then(response => response.json())             \r\n        .then(data => {\r\n            this.props.updateRoute(\"Login\");\r\n        })\r\n        .catch(err => console.log(\"Err sending logout req\"));\r\n    }\r\n\r\n    onClickTable = () =>\r\n    {\r\n        this.props.updateRoute(\"Table\");\r\n    }\r\n\r\n    signOutAllUsers = () =>\r\n    {\r\n        fetch('http://localhost:3001/supersignout',{\r\n            method: 'post',\r\n            headers: {'Content-Type': 'application/json'},\r\n            body: JSON.stringify({\r\n            email: this.state.email\r\n            })\r\n        })\r\n        .then(response => response.json())             \r\n        .then(data => {\r\n            if(data.message == \"SUCCESS\")\r\n            {\r\n                alert(\"All users logged out.\");\r\n            }\r\n            else\r\n            {\r\n                alert(\"Error logging users out.\");\r\n            }\r\n        })\r\n        .catch(err => console.log(\"Err processing all log out req\"));\r\n\r\n    }\r\n\r\n    render() {\r\n        let isAdminStatus = this.state.isAdmin;\r\n        console.log(\"isAdmin :\", isAdminStatus);\r\n        let superLogOut = null;\r\n        if(isAdminStatus)\r\n        {\r\n            superLogOut = \r\n            <div>\r\n            <button \r\n            style = {{backgroundColor: \"black\", color:\"white\", borderColor: \"gold\", \r\n                  width: \"auto\", height: \"auto\", padding: \"8px\", margin: \"30px 50px\"}}                        \r\n            onClick={this.onClickTable}>Records</button>\r\n            <button \r\n            style = {{backgroundColor: \"black\", color:\"red\", borderColor: \"gold\", \r\n                  width: \"auto\", height: \"auto\", padding: \"8px\", margin: \"30px 50px\"}}                        \r\n            onClick={this.signOutAllUsers}>Log ALL USERS Out</button>\r\n            </div>;\r\n        }\r\n\r\n        return (\r\n            <div>\r\n            <Notifications />\r\n            <div style={{display:\"flex\", width: \"100%\"}}  tabIndex = {1} key = {this.state.playersLeft} onKeyDown = {this.onKeyDown} >\r\n                    \r\n                    <div style = {{display:\"flex-start\", width: \"20%\"}} id = \"ALL NON-PLAYER INFO\">\r\n\r\n                    <div style={{display:'flex', justifyContent: 'center'}}>\r\n                    <h3 style ={{color: \"chartreuse\"}}>Today's rate is: {this.state.billingRate}</h3>\r\n                    </div>\r\n                    \r\n                    <div>\r\n                    <h4>Max no of players at once: </h4>\r\n                    <input style={{marginLeft: '10px', borderColor: \"gold\", borderWidth: \"3px\",\r\n                                    backgroundColor: \"#3A4245\", color: \"gold\", textAlign: \"center\",\r\n                                   width: \"100px\", height: \"25px\"\r\n                            }}\r\n                        placeholder= \"default is 2\" \r\n                        value = {this.state.instance}\r\n                        onChange={this.onChange} ></input>\r\n                    </div>\r\n\r\n                    <div>\r\n                    <button \r\n                    style={{backgroundColor: \"#3A4245\", color:\"gold\", borderColor: \"gold\",  \r\n                    width: \"auto\", height: \"auto\", padding: \"8px\", margin: \"50px 50px\"}}\r\n                    onClick = {() => this.setState({playSoundStatus: \"STOPPED\"})}>\r\n                    STOP SOUND\r\n                    </button>\r\n                    <button \r\n                    onClick={this.onSubmit}\r\n                    // #3A4245\r\n                    style = {{backgroundColor: \"#3A4245\", color:\"chartreuse\", borderColor: \"gold\", \r\n                              width: \"auto\", height: \"auto\", padding: \"4px\", margin: \"5px 50px\"}}\r\n                    >\r\n                    {this.state.buttonText.toUpperCase()}\r\n                    </button>\r\n                    </div>\r\n                    <div>\r\n                        <button \r\n                        style = {{backgroundColor: \"black\", color:\"red\", borderColor: \"gold\", \r\n                              width: \"auto\", height: \"auto\", padding: \"8px\", margin: \"30px 50px\"}}                        \r\n                        onClick={this.onClickSignOut}>Log Out</button>\r\n                        {superLogOut}\r\n                    </div>\r\n                    </div>\r\n\r\n\r\n\r\n                    <div id=\"PLAYER DATA\" style = {{display:\"flex-end\", width: \"80%\"}}>\r\n                        <div style = {{width: \"100%\", overflowX: \"auto\"}}>\r\n                            {this.state.displayData}\r\n                            <div style={{marginLeft: \"45%\"}}>\r\n                            {this.state.searching ? <h3><ReactLoading type=\"spin\" color=\"chartreuse\"/></h3> : null}  \r\n                            </div>\r\n                            <br />\r\n                            {this.state.noPlayerDisplay}\r\n                        </div>\r\n                    </div>\r\n\r\n            </div>\r\n\r\n            <div id=\"MODAL AND SOUND\">\r\n                    <section>\r\n                        {/* <input type=\"button\" value=\"Open\" onClick={() => this.openModal()} /> */}\r\n                        <Modal \r\n                            visible={this.state.visible}\r\n                            width=\"400\"\r\n                            height=\"300\"\r\n                            effect=\"fadeInUp\"\r\n                            style = {{backgroundColor: \"cadetblue\", color: \"gold\",\r\n                                    border: \"5px solid red\", borderSize: \"10px\"\r\n                            }}\r\n                            // onClickAway={() => this.closeModal()}\r\n                        >\r\n                            <div>\r\n                                <h1>Cancel Purchase</h1>\r\n                                <p>Are you sure you want to cancel the purchase of this player? Click YES to proceed, or NO to go back.</p>\r\n                                <br />\r\n                                <button onClick = {this.clickModalOK} \r\n                                style={{backgroundColor: \"red\", color: \"white\", width: \"100px\", height: \"50px\"}}>\r\n                                YES\r\n                                </button>\r\n                                <br />\r\n                                <br />\r\n                                <button onClick = {this.closeModal} \r\n                                style={{backgroundColor: \"green\", color: \"white\",width: \"100px\", height: \"50px\"}}>\r\n                                NO\r\n                                </button>\r\n                            </div>\r\n                        </Modal>\r\n                    </section>\r\n                    <Sound\r\n                    url=\"https://www.soundjay.com/button/beep-08b.mp3\"\r\n                    playStatus={this.state.playSoundStatus}\r\n                    playFromPosition={0 /* in milliseconds */}\r\n                    volume={100}\r\n                    autoLoad={true}\r\n                    loop={true}\r\n                    // onLoading={this.handleSongLoading}\r\n                    // onPlaying={this.handleSongPlaying}\r\n                    // onFinishedPlaying={this.handleSongFinishedPlaying}\r\n                    />\r\n            </div> \r\n\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default PlayerHandler;\r\n\r\n\r\n\r\n\r\n    // render1() {\r\n    //     return (\r\n    //         <div tabIndex = {1} key = {this.state.playersLeft} onKeyDown = {this.onKeyDown} >\r\n    //                 <div style={{display:'flex', justifyContent: 'center'}}>\r\n    //                 <h3 style ={{color: \"chartreuse\"}}>Today's rate is: {this.state.billingRate}</h3>\r\n    //                 </div>\r\n    //                 <div>\r\n    //                 <h4>Max no of players at once: </h4>\r\n    //                 <input style={{marginLeft: '10px', borderColor: \"gold\", borderWidth: \"3px\",\r\n    //                                 backgroundColor: \"#3A4245\", color: \"gold\", textAlign: \"center\",\r\n    //                                width: \"50px\", height: \"20px\"\r\n    //                         }}\r\n    //                     placeholder= \"\" \r\n    //                     value = {`${this.state.instance}`}\r\n    //                     onChange={this.onChange} ></input>\r\n    //                 </div>\r\n    //                 <div>\r\n    //                 {this.state.noPlayerDisplay}\r\n    //                 </div>\r\n    //                 <div>\r\n    //                 <button \r\n    //                 style={{backgroundColor: \"#3A4245\", color:\"gold\", borderColor: \"gold\",  \r\n    //                 width: \"auto\", height: \"auto\", padding: \"8px\", margin: \"0px 50px\"}}\r\n    //                 onClick = {() => this.setState({playSoundStatus: \"STOPPED\"})}>\r\n    //                 STOP SOUND\r\n    //                 </button>\r\n    //                 <button \r\n    //                 onClick={this.onSubmit}\r\n    //                 // #3A4245\r\n    //                 style = {{backgroundColor: \"#3A4245\", color:\"chartreuse\", borderColor: \"gold\", \r\n    //                           width: \"auto\", height: \"auto\", padding: \"8px\", margin: \"0px 50px\"}}\r\n    //                 >\r\n    //                 {this.state.buttonText.toUpperCase()}\r\n    //                 </button>\r\n    //                 </div>\r\n    //                 <div style={{display:'flex', justifyContent: \"center\", overflow: \"auto\", width: \"90%\", margin:\"auto auto\"}}>\r\n    //                 <div>\r\n    //                 {this.state.displayData}  \r\n    //                 </div>\r\n    //                 </div>\r\n    //                 <section>\r\n    //                     {/* <input type=\"button\" value=\"Open\" onClick={() => this.openModal()} /> */}\r\n    //                     <Modal \r\n    //                         visible={this.state.visible}\r\n    //                         width=\"400\"\r\n    //                         height=\"300\"\r\n    //                         effect=\"fadeInUp\"\r\n    //                         style = {{backgroundColor: \"cadetblue\", color: \"gold\",\r\n    //                                 border: \"5px solid red\", borderSize: \"10px\"\r\n    //                         }}\r\n    //                         // onClickAway={() => this.closeModal()}\r\n    //                     >\r\n    //                         <div>\r\n    //                             <h1>Cancel Purchase</h1>\r\n    //                             <p>Are you sure you want to cancel the purchase of this player? Click YES to proceed, or NO to go back.</p>\r\n    //                             <br />\r\n    //                             <button onClick = {this.clickModalOK} \r\n    //                             style={{backgroundColor: \"red\", color: \"white\", width: \"100px\", height: \"50px\"}}>\r\n    //                             YES\r\n    //                             </button>\r\n    //                             <br />\r\n    //                             <br />\r\n    //                             <button onClick = {this.closeModal} \r\n    //                             style={{backgroundColor: \"green\", color: \"white\",width: \"100px\", height: \"50px\"}}>\r\n    //                             NO\r\n    //                             </button>\r\n    //                         </div>\r\n    //                     </Modal>\r\n    //                 </section>\r\n    //                 <Sound\r\n    //                 url=\"https://www.soundjay.com/button/beep-08b.mp3\"\r\n    //                 playStatus={this.state.playSoundStatus}\r\n    //                 playFromPosition={0 /* in milliseconds */}\r\n    //                 volume={100}\r\n    //                 autoLoad={true}\r\n    //                 loop={true}\r\n    //                 // onLoading={this.handleSongLoading}\r\n    //                 // onPlaying={this.handleSongPlaying}\r\n    //                 // onFinishedPlaying={this.handleSongFinishedPlaying}\r\n    //                 />\r\n    //         </div> \r\n    //     );\r\n    // }\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport Register from './Register';\nimport PlayerData from './PlayerData';\nimport SignIn from './SignIn';\nimport TableClass from './TableClass';\nimport PlayerHandler from './PlayerHandler';\nimport 'tachyons';\n\n\nconst axios = require('axios');\n\nvar display = null;\n\nclass App extends Component {\n\n  state = {\n    route: \"Login\",\n    email: \"\",\n    apikey: \"\",\n  };\n\n  updateRoute = (value) =>\n  {\n    this.setState({\n      route: value\n    });\n  }\n\n  setEmailAndApiKey = (email,key) => {\n\n    this.setState({\n      email: email,\n      apikey: key\n    });\n  };\n\n  onSubmit = (query) =>\n  {\n    let that = this;\n  }\n\n  render() {\n    if(this.state.route == \"Login\")\n    {\n      display = \n      <div>\n      <SignIn updateRoute={this.updateRoute} setEmailAndApiKey={this.setEmailAndApiKey}/>\n      </div>\n    }\n    else if (this.state.route == \"Register\")\n    {\n      display = <Register updateRoute={this.updateRoute}/>\n    }\n    else if(this.state.route == \"App\")\n    {\n      display =  \n      <div>\n        <PlayerHandler data={this.state} updateRoute={this.updateRoute}/>\n      </div>\n    }\n    else if(this.state.route == \"Table\")\n    {\n      display =  \n      <div>\n        <TableClass data={this.state} updateRoute={this.updateRoute}/>\n      </div>\n    }\n    return (\n      <div className=\"App\">\n        <h2 style={{display: 'flex', justifyContent: 'center'}}>Welcome to FUT Player Market</h2>\n        {display}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}